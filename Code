## This is an example of the first version of an R script I wrote up last year myself for pulling curve deltas and volumes
## Has since been updated a few times, namely primarily using dplyr instead of for loops and apply() functions to look more elegant and less redundant, but this piece shows my general understanding of base R

## Note: I drop strategy names and a few sections for privacy sake and thus code is inoperatable

## Term PnL - by Colin for Power Trading Team, 8/18/2023, Reworked 11/25/23 (Excel version - makes more sense for users)

## General notes (To do list) : Rework Bid/Ask to be pullable in here, Rework CARD, change all queries to be dynamic based on fiscal year (more work than worth tho), vectorize/cur down redundancy on the calculation loops, change DBI to rODBC library for sql upload

## Possible things to implement: export charts, waterflow diagrams, etc. Make YTDStart a dynamic number (why though?). 
## Don't repeat query command when already that given day (if script ran at 10 AM and at 3 PM after rerun though, pick that up?)
## Do we want script running THROUGH BI?(More user-friendly UI to generate interactable views, possible even runs faster?), just as an Email, just as a quick CSV writing tool for drilldown, etc

## STEPS TO OPERATE: 1) Change "DoDStart" and "DoDEnd" to correct days
# 2) Set Complete Rerun to 1 or if queries are already loaded into workspace, set PivotTables and Unexplained to 1 then run with CTRL + A then CTRL + R
# 3) If console prints "Export Complete" and "CSV Exported", open Excel file, copy over FX Rate on Top Summary tab
# 3) a) Last line of commented code shows Unexplained from new day, can be ran with CTRL + R after highlighting
# 4) Refresh All queries on the Excel file, change DoD Start date on Top Summary tab, then hit F9
# 5) Update Bid/Ask and CARD and link files to Excel like previously (WIP to populate)


## Toggles that choose which sections run. SET TO 1 TO RUN. 
CompleteRerun			= 1	## Reruns whole file

CSVExportSection			= 0
RefreshAllQueriesSection	= 0
PivotTablesSection		= 1
BidAskReserveSection 		= 0
UnexplainedSection		= 1

if(CompleteRerun ==1) { 
	rm(list=ls())
	CSVExportSection			= 1
	RefreshAllQueriesSection	= 1
	PivotTablesSection		= 1
	BidAskReserveSection 		= 0
	UnexplainedSection		= 1
}

## User inputs: 

DoDStart <-  20240718
DoDEnd   <-  20240719       # Last day of curves you want pulled (3/25/2023 pulls all curves but then only filter YTD on 3/25/2023 or earlier)

MTDStart <-	 20240626

YTDStart <-  20240326		## Start date for fiscal year
BTDStart <-  20240227		## Budget start date for fiscal year

## Libraries:
library(ggplot2)
library(openxlsx) 
library(DBI)
library(odbc)
library(RODBC)
library(dplyr)
library(lubridate)
library(readxl)

InsertTime <- Sys.time()
DoDStart<-as.Date(strptime(DoDStart,format = "%Y%m%d"))
MTDStart<-as.Date(strptime(MTDStart,format = "%Y%m%d"))
	##MTDStart<- floor_date(ymd(DoDEnd),'month')-1
	##BTDStart<-as.Date(strptime(BTDStart, format ="%Y%m%d"))
YTDStart<-as.Date(strptime(YTDStart,format = "%Y%m%d"))
DoDEnd<- as.Date(strptime(DoDEnd,format = "%Y%m%d"))
DateCounter<-c("DoD","MTD","YTD")
DateCounterDates<-c(DoDStart,MTDStart,YTDStart)
	##DateCounterDates<-c(DoDStart,MTDStart,YTDStart,BTDStart)


## Creates a connection between RStudio and all of the SQL channels used to run all SQL queries (and at end insert/write table commands)
PDBChannel<- dbConnect(odbc::odbc(), driver ="SQL Server", Server = "DBACM\\ARCHIMEDES",database ="PortfolioDB")
EMSAnalyticsChannel<-dbConnect(odbc::odbc(), driver ="SQL Server", Server = "TPRDSQLVM273\\SQL04",database ="EMS_ANALYTICS")
EMSChannel<- dbConnect(odbc::odbc(), driver ="SQL Server", Server = "EMS\\SQL01",database ="EMS")
DBSQL04Channel<- dbConnect(odbc::odbc(), driver ="SQL Server", Server = "DBSQL04\\SQL04", database ="Supply_Analytics")

## Functions from Load forecasting that allows insert into explicit SQL table names without adding the OESCCA\username add-on
fcn_SQLInsertFast = function(data0, saveTable, channelInsert, numParts = 500){
  ####can only do for 15k row blocks for some reason
  if(nrow(data0) <= numParts){
    
    p <- paste0("INSERT INTO ", saveTable, "
                      VALUES
                      ",paste0(apply(data0, 1, fcn_PasteRow), collapse = ',\n'), collapse = '\n')
    
    p <-  gsub(x = p, pattern = "'NA'", replacement = "NULL")
    
    sqlQuery(channelInsert,
             p,
             stringsAsFactors = FALSE,
             as.is = T)
  } else {
    KK = ceiling(nrow(data0) / numParts)
    data1 = split(data0, sort(sample(1:KK, nrow(data0), replace=T)), drop = T)
    for(j in 1:KK){
      #names(data1[[j]])
      
      p <- paste0("INSERT INTO ", saveTable, "
                      VALUES
                      ",paste0(apply(data1[[j]], 1, fcn_PasteRow), collapse = ',\n'), collapse = '\n')
      
      p <-  gsub(x = p, pattern = "'NA'", replacement = "NULL")
      
      # Data check
      before <- sqlQuery(channelInsert, paste0("SELECT count(*) as count from ",saveTable)) %>% pull(count) %>% as.integer()
      # Insert
      sqlQuery(channelInsert, p )
      # number we should add
      added_rows <- nrow(data1[[j]])
      # After
      after <- sqlQuery(channelInsert, paste0("SELECT count(*) as count from ",saveTable)) %>% pull(count) %>% as.integer()
      
      if(added_rows + before != after ) {
        stop(paste("Problem at slice :", j ))
      }
    }
  }
}
fcn_PasteRow = function(dataRow1){
  return(paste0(
    "('", paste(dataRow1, collapse = "','"),"')"
  ))
}

if (RefreshAllQueriesSection ==1){

## Dataframes that links together strategies/ISOs/etc (KEY tab on original EXCEL)
StrategyKey <- data.frame("StrategyID" =c(192,193,178,190,187,188,185,171,196,197,198,202),"Strategy1" = c("XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX"))

StrategySummaryKey<-data.frame("Strategy"= c("XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX"))
,"Strategy2"= c("XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX"))

EKAStrategyKey<-data.frame("StrategyID" = c(3,71,121,125,126,127,128,130,132,138,145,159,171,175,176,178,185,186,187,188,190,192,193,194,197,198,202),
"EKAStrategy" =  c("XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX"))

GasPortfolioKey<-data.frame("Portfolio" =  c("XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX"),
"Country"=  c("XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX"))

CashLockDates<-data.frame("Months" = seq.Date(from = ymd(20240401), to = ymd(20250301),by= "month"),
"CashLocks" = as.Date(c("2024-03-26","2024-04-26","2024-05-29","2024-06-26","2024-07-29","2024-08-28","2024-09-26","2024-10-29","2024-11-26","2024-12-27","2025-01-29","2025-02-26")))

## Queries (C) & Connections (Q) (Letter is what they show up on Excel under Connections and Queries tab, Number is their indexed location on said list.

## Q1 is useless??
Q2<-dbGetQuery(EMSAnalyticsChannel,
	"SELECT  L.* FROM dbo.NaturalGas_TradePnL_Risk L
	LEFT JOIN (SELECT DISTINCT TransactionID,TransactionItemID FROM SQL04TOEKA.EkaEnergy.dbo.JE_PortfolioDB_Interface) E ON E.TransactionItemID +1000000 = L.ReferenceOID
	LEFT JOIN (SELECT DISTINCT TransactionID,StrategyID FROM SQL04TOEKA.EkaEnergy.dbo.TransactionHeader) TR ON TR.TransactionID = E.TransactionID
	LEFT JOIN (SELECT DISTINCT StrategyID,Strategy FROM SQL04TOEKA.EkaEnergy.dbo.Strategy) S ON S.StrategyID = TR.StrategyID
	WHERE L.reportdate >= '20240227' and L.calendarmonth >= '20240401'")
Q2$TradePnL_USD<-ifelse(Q2$CurrencyOID ==1,Q2$TradePnL/Q2$USDToCAD,Q2$TradePnL)
Q2$TradePnL_TeamCurrency<-ifelse(Q2$CurrencyOID == 2 & Q2$TradingTeam =="Canada" & Q2$Strategy != "JE XXX",Q2$TradePnL * Q2$USDToCAD,Q2$TradePnL)
Q2<-merge(Q2,StrategyKey,by.x ="StrategyID",by.y="StrategyID",all.x =TRUE)
Q2<-merge(Q2,StrategySummaryKey,by.x = "Strategy",by.y = "Strategy",all.x = TRUE)
Q2$Strategy2[is.na(Q2$Strategy2)]<-"Wholesale"
Q2$Strategy2[Q2$Strategy2=="Wholesale"]<-paste(Q2$TradingTeam[Q2$Strategy2=="Wholesale"],Q2$Strategy2[Q2$Strategy2=="Wholesale"])
Q2$ISO <- ifelse(Q2$Strategy2=="XXX","IESO",ifelse(Q2$Strategy2=="US Power:ERCOT Shape","ERCOT",ifelse(Q2$Strategy2=="US Power: NE Weather","PJM",0)))
Q2$CalendarMonth<-as.Date(Q2$CalendarMonth)
Q2$FiscalYear <- year(Q2$CalendarMonth %m-%months(3))+1
Q2<-merge(Q2,CashLockDates,by.x ="CalendarMonth", by.y="Months",all.x = TRUE)
Q2$Include <- ifelse((is.na(Q2$CashLocks)==TRUE | (is.na(Q2$CashLocks)==FALSE & Q2$ReportDate <=Q2$CashLocks)),"Y","N")
Q2$YTDStartToPromptMonth<-ifelse(Q2$CalendarMonth <= DoDEnd,"Y","N")

Q3<-dbGetQuery(EMSAnalyticsChannel,
	"SELECT X.ReportDate, X.PreviousEffectiveStartDate, X.EndofDayEffectiveStartDate, X.Portfolio, X.CalendarMonth, X.CurveUnitIdentifier, X.UnitIdentifier, X.CurrencyOID, Sum(X.Volume) AS 'Volume', Sum(X.Cost) AS 'Cost', Sum(X.MarketValue) AS 'MarketValuePriorDay', Sum(X.MarktoMarket) AS 'MarketoMarketPriorDay', Sum(X.NG_CurvePnL) AS 'NG_CurvePnL', Sum(X.TradeHubPnL) AS 'TradeHubPnL', Sum(X.BasisStrategyPnL) AS 'BasisStrategyPnL', X.USDToCAD, X.Previous_USDToCAD, X.StrategyID
	FROM EMS_ANALYTICS.dbo.NaturalGas_CurvePnL_Risk X
	WHERE (X.ReportDate>='20240227') AND (X.CalendarMonth >='20240401')
	GROUP BY X.ReportDate, X.PreviousEffectiveStartDate, X.EndofDayEffectiveStartDate, X.Portfolio, X.CalendarMonth, X.CurveUnitIdentifier, X.UnitIdentifier, X.CurrencyOID, X.USDToCAD, X.Previous_USDToCAD, X.StrategyID
	ORDER BY X.ReportDate")
Q3$ReportDate <-as.Date(Q3$ReportDate)
Q3<-merge(Q3,EKAStrategyKey,by.x = "StrategyID",by.y = "StrategyID",all.x = TRUE)
Q3$EKAStrategy[is.na(Q3$EKAStrategy)]<-"Other"
Q3<-merge(Q3,GasPortfolioKey,by.x = "Portfolio",by.y = "Portfolio",all.x = TRUE)
Q3<- merge(Q3,StrategySummaryKey,by.x = "EKAStrategy",by.y = "Strategy",all.x = TRUE)
Q3$Strategy2[Q3$Strategy2=="Wholesale"]<-paste(Q3$Country[Q3$Strategy2=="Wholesale"],Q3$Strategy2[Q3$Strategy2=="Wholesale"])
Q3[c("NGCurvePnL_USD","TradeHubPnL_USD","BasisStrategyPnL_USD","PriorDayMTMCheck")]<-lapply(Q3[c("NG_CurvePnL","TradeHubPnL","BasisStrategyPnL","MarketoMarketPriorDay")],function(x) ifelse(Q3$CurrencyOID!=2,(x/Q3$USDToCAD),x))
Q3[c("NGCurvePnL_TeamCurrency","TradeHubPnL_TeamCurrency","BasisStrategyPnL_TeamCurrency")]<-lapply(Q3[c("NG_CurvePnL","TradeHubPnL","BasisStrategyPnL")],function(x) ifelse(Q3$CurrencyOID==2 & Q3$Country =="Canada" & Q3$StrategyID !=187,x*Q3$USDToCAD,x))
Q3$"PriorDayMTMCheck_TeamCurrency"<-ifelse(Q3$CurrencyOID==2 & Q3$Country =="Canada",Q3$MarketoMarketPriorDay*Q3$Previous_USDToCAD,Q3$MarketoMarketPriorDay)
Q3$FXAdjustmentCheck<-ifelse(Q3$Country =="Canada" & Q3$CurrencyOID ==2 & Q3$StrategyID !=187,(Q3$MarketoMarketPriorDay * (Q3$USDToCAD-Q3$Previous_USDToCAD)),0) 
Q3$ISO <- ifelse(Q3$Strategy2=="CAN Power","IESO",ifelse(Q3$Strategy2=="US Power:ERCOT Shape","ERCOT",ifelse(Q3$Strategy2=="US Power: NE Weather","PJM",0)))
Q3$CalendarMonth <-as.Date(Q3$CalendarMonth)
Q3$FiscalYear <- year(Q3$CalendarMonth %m-%months(3))+1
Q3<-merge(Q3,StrategyKey,by.x ="StrategyID",by.y ="StrategyID", all.x =TRUE)
Q3<-merge(Q3,CashLockDates,by.x ="CalendarMonth", by.y="Months",all.x = TRUE)
Q3$Include <- ifelse((is.na(Q3$CashLocks)==TRUE | (is.na(Q3$CashLocks)==FALSE & Q3$ReportDate <=Q3$CashLocks)),"Y","N")
Q3$YTDStartToPromptMonth<-ifelse(Q3$CalendarMonth <= DoDEnd,"Y","N")

Q4<-dbGetQuery(EMSAnalyticsChannel,
	"SELECT * From dbo.NaturalGas_InternalTransferPnL_Risk 
	Where ReportDate >= '20240227' AND Calendarmonth >= '20240401'
	order by ReportDate, CalendarMonth")
Q4<-merge(Q4,GasPortfolioKey,by.x = "Portfolio",by.y = "Portfolio",all.x = TRUE)
Q4$CurrencyCheck <- ifelse(Q4$Country =="Canada" & Q4$CurrencyOID ==2,"Nonnative","Native")
Q4$Strategy2 <- paste(Q4$Country,"Wholesale")
Q4$TransferPnL_TeamCurrency<- ifelse(Q4$CurrencyCheck =="Nonnative",Q4$TransferPnL * Q4$USDToCAD,Q4$TransferPnL)
Q4$CalendarMonth <-as.Date(Q4$CalendarMonth)
Q4<-merge(Q4,CashLockDates,by.x ="CalendarMonth", by.y="Months",all.x = TRUE)
Q4$Include <- ifelse((is.na(Q4$CashLocks)==TRUE | (is.na(Q4$CashLocks)==FALSE & Q4$ReportDate <=Q4$CashLocks)),"Y","N")
Q4$YTDStartToPromptMonth<-ifelse(Q4$CalendarMonth <= DoDEnd,"Y","N")

Q5<-dbGetQuery(EMSChannel,
	"SELECT  S.* ,D.DealDirectionIdentifier FROM EMS.dbo.deal as D
	inner join EMSToEMS_Analytics.EMS_Analytics.dbo.Power_TradePnL_Risk S ON D.dealoid = S.referenceOID
	WHERE ReportDate >= '20240227' AND CalendarMonth >= '20240401' and Portfolio <> 'CAISO' AND Bookoid <> 301
	Order by ReportDate, Calendarmonth")
Q5$CalendarMonth <-as.Date(Q5$CalendarMonth)
Q5<-merge(Q5,CashLockDates,by.x ="CalendarMonth", by.y="Months",all.x = TRUE)
Q5$Include <- ifelse((is.na(Q5$CashLocks)==TRUE | (is.na(Q5$CashLocks)==FALSE & Q5$ReportDate <=Q5$CashLocks)),"Y","N")
Q5$YTDStartToPromptMonth<-ifelse(Q5$CalendarMonth <= DoDEnd,"Y","N")

Q6<-dbGetQuery(EMSChannel,
	"SELECT ReportDate,Fiscal,CalendarMonth,MasterPortfolio,Portfolio,PriceIndexIdentifier,Volume,Cost,ReferenceCost,TransferPnL,InsertTime
	FROM EMSToEMS_Analytics.EMS_Analytics.dbo.Power_InternalTransferPnL_Risk S
	WHERE ReportDate >= '20240227' AND CalendarMonth >= '20240401' AND InsertTime = (Select MAX(InsertTime) From EMSToEMS_Analytics.EMS_Analytics.dbo.Power_InternalTransferPnL_Risk Where ReportDate = S.ReportDate)AND Portfolio <> 'CAISO'")
Q6$CalendarMonth <-as.Date(Q6$CalendarMonth)
Q6<-merge(Q6,CashLockDates,by.x ="CalendarMonth", by.y="Months",all.x = TRUE)
Q6$Include <- ifelse((is.na(Q6$CashLocks)==TRUE | (is.na(Q6$CashLocks)==FALSE & Q6$ReportDate <=Q6$CashLocks)),"Y","N")
Q6$YTDStartToPromptMonth<-ifelse(Q6$CalendarMonth <= DoDEnd,"Y","N")

Q7<-dbGetQuery(EMSChannel,
	"SELECT ReportDate,PreviousEffectiveStartDate,EndofDayEffectiveStartDate,MasterPortfolio,Portfolio,ReferenceIdentifier,CalendarMonth,avg(USDtoCAD) as USDtoCAD,Sum (TotalBlockPnL) as TotalBlockPnL,Sum(TotalShapePnL) as TotalShapePnL,Sum(PWR_CurvePnL) as PWR_CurvePnL,InsertTime,Sum(MarkToMarket) as PriorDayMTM
	FROM EMSToEMS_Analytics.EMS_Analytics.dbo.Power_BlockPnLForShape_Risk S
	WHERE ReportDate >= '20240227' AND CalendarMonth >= '20240401' AND InsertTime= (Select MAX(InsertTime) From EMSToEMS_Analytics.EMS_Analytics.dbo.Power_BlockPnLForShape_Risk  Where ReportDate = S.ReportDate) AND Portfolio <> 'CAISO'
	Group By ReportDate,PreviousEffectiveStartDate,EndofDayEffectiveStartDate,MasterPortfolio,Portfolio,ReferenceIdentifier,CalendarMonth,InsertTime")
Q7$CalendarMonth <-as.Date(Q7$CalendarMonth)
Q7<-merge(Q7,CashLockDates,by.x ="CalendarMonth", by.y="Months",all.x = TRUE)
Q7$Include <- ifelse((is.na(Q7$CashLocks)==TRUE | (is.na(Q7$CashLocks)==FALSE & Q7$ReportDate <=Q7$CashLocks)),"Y","N")
Q7$YTDStartToPromptMonth<-ifelse(Q7$CalendarMonth <= DoDEnd,"Y","N")
Q7$FiscalYear<-year(Q7$CalendarMonth %m-%months(3))+1

Q8<-dbGetQuery(EMSChannel,
	"SELECT *
	FROM EMSToEMS_Analytics.EMS_Analytics.dbo.Power_WeatherStrategyPnL_Risk S
	WHERE ReportDate >= '20240227' AND CalendarMonth >= '20240401' AND Portfolio <> 'CAISO'")
Q8$CalendarMonth <-as.Date(Q8$CalendarMonth)
Q8<-merge(Q8,CashLockDates,by.x ="CalendarMonth", by.y="Months",all.x = TRUE)
Q8$Include <- ifelse((is.na(Q8$CashLocks)==TRUE | (is.na(Q8$CashLocks)==FALSE & Q8$ReportDate <=Q8$CashLocks)),"Y","N")
Q8$YTDStartToPromptMonth<-ifelse(Q8$CalendarMonth <= DoDEnd,"Y","N")
Q8$FiscalYear<-year(Q8$CalendarMonth %m-%months(3))+1

Q9<-dbGetQuery(EMSChannel,
	"SELECT ReportDate,PreviousEffectiveStartDate,EndofDayEffectiveStartDate,Portfolio,CalendarMonth,TradeHub,avg(USDtoCAD) as USDtoCAD,Sum (PWR_CurvePnL) as PWR_CurvePnL,Sum (TradeHubPnL) as TradeHubPnL,Sum (BasisStrategyPnL) as BasisStrategyPnL,Sum (HubtoHubBasisStrategyPnL) as HubtoHubBasisStrategyPnL,Sum (HubtoLZBasisStrategyPnL) as HubtoLZBasisStrategyPnL,Sum (HubtoHubShapePnL) as HubtoHubShapePnL,Sum (HubtoLZShapePnL) as HubtoLZShapePnL,Sum (TradeHubShapePnL) as TradeHubShapePnL,Sum (TotalShapePnL) as TotalShapePnL,Sum (TotalBlockPnL) as TotalBlockPnL,Sum (TradeHubBlockPnL) as TradeHubBlockPnL,db_insertDate,sum(MarkToMarket) as PriorDayMTM
	FROM EMSToEMS_Analytics.EMS_Analytics.dbo.Power_CurvePnL_Risk S
	WHERE ReportDate >= '20240227' AND CalendarMonth >= '20240401' AND Portfolio <> 'CAISO' AND bookoid <> 301 AND db_insertDate= (Select MAX(db_insertDate) From EMSToEMS_Analytics.EMS_Analytics.dbo.Power_CurvePnL_Risk  Where ReportDate = S.ReportDate)
	Group By ReportDate,PreviousEffectiveStartDate,EndofDayEffectiveStartDate,Portfolio,CalendarMonth,TradeHub,UnitIdentifier,db_insertDate,bookoid")
Q9$HubtoLZBasisStrategyBlockPnL <- Q9$HubtoLZBasisStrategyPnL - Q9$HubtoLZShapePnL
Q9$CalendarMonth <-as.Date(Q9$CalendarMonth)
Q9$FiscalYear<-year(Q9$CalendarMonth %m-%months(3))+1
Q9$HubtoHubBasisStrategyBlockPnL = Q9$HubtoHubBasisStrategyPnL-Q9$HubtoHubShapePnL
Q9<-merge(Q9,CashLockDates,by.x ="CalendarMonth", by.y="Months",all.x = TRUE)
Q9$Include <- ifelse((is.na(Q9$CashLocks)==TRUE | (is.na(Q9$CashLocks)==FALSE & Q9$ReportDate <=Q9$CashLocks)),"Y","N")
Q9$YTDStartToPromptMonth<-ifelse(Q9$CalendarMonth <= DoDEnd,"Y","N")
Q9<-Q9[order(Q9$ReportDate,Q9$Portfolio,Q9$CalendarMonth),]

## More connections. some of these are unnecessary though???
if(0==1){
C1<-dbGetQuery(EMSAnalyticsChannel,"select *
	from Power_TradePnL_Risk R 
	where reportdate >='20240227'and bookoid = 133
	order by reportdate")

C2<-dbGetQuery(EMSAnalyticsChannel,
	"select ReportDate,Portfolio,CONVERT(VARCHAR(4),YEAR(DATEADD(MM,9,CalendarMonth))) as Fiscal,PriceIndexIdentifier,CurrencyOID,TradeHub,StrategyID,sum(MarktoMarket) as MTM,sum(NG_Curvepnl) as NG_CurvePnL,Previous_USDToCAD,USDToCAD
	from NaturalGas_CurvePnL_Risk
	where reportdate >= '20240227' and calendarmonth >= '20240401' and StrategyID = '178'
	group by ReportDate,Portfolio,CONVERT(VARCHAR(4),YEAR(DATEADD(MM,9,CalendarMonth))),PriceIndexIdentifier,CurrencyOID,TradeHub,StrategyID,Previous_USDToCAD,USDToCAD")

C3<-dbGetQuery(EMSAnalyticsChannel,
	"select ReportDate,WholesaleGasBookDescription,Strategy,CONVERT(VARCHAR(4),YEAR(DATEADD(MM,9,CalendarMonth))) as Fiscal,PriceIndexIdentifier,CurrencyOID, sum(tradePnl) as TradePnL,USDToCAD
	from NaturalGas_TradePnL_Risk
	where reportdate >= '20240227' and CalendarMonth >= '20240401' and Strategy = 'Ontario Power Variable Hedging' --it is StrategyID 178
	group by ReportDate,WholesaleGasBookDescription,Strategy,CONVERT(VARCHAR(4),YEAR(DATEADD(MM,9,CalendarMonth))),PriceIndexIdentifier,CurrencyOID,USDToCAD")

C4<-dbGetQuery(EMSAnalyticsChannel,
	"select ReportDate,Portfolio,BookOID,CONVERT(VARCHAR(4),YEAR(DATEADD(MM,9,CalendarMonth))) as Fiscal,PriceIndexIdentifier,CurrencyIdentifier, sum(MarktoMarket) as MTM,Sum(PWR_CurvePnL) as CurvePnL,USDToCAD
	from Power_CurvePnL_Risk
	where reportdate >= '20240227' and CalendarMonth >= '20240401' and bookoid = 135
	group by ReportDate,Portfolio,BookOID,CONVERT(VARCHAR(4),YEAR(DATEADD(MM,9,CalendarMonth))),PriceIndexIdentifier,CurrencyIdentifier, USDToCAD")

C5<-dbGetQuery(EMSAnalyticsChannel,
	"select A.ReportDate,A.Portfolio,A.BookOID,CONVERT(VARCHAR(4),YEAR(DATEADD(MM,9,A.CalendarMonth))) as Fiscal,A.PriceIndexIdentifier,A.CurrencyIdentifier, sum(A.TradePnL) as MTM,A.USDToCAD
	from Power_TradePnL_Risk A 
	where reportdate >= '20240227' and CalendarMonth >= '20240401' and bookoid = 135
	group by ReportDate,Portfolio,BookOID,CONVERT(VARCHAR(4),YEAR(DATEADD(MM,9,CalendarMonth))),PriceIndexIdentifier,CurrencyIdentifier, USDToCAD")
}

C6<-dbGetQuery(EMSAnalyticsChannel,
	"select ReportDate,Portfolio,CONVERT(VARCHAR(4),YEAR(DATEADD(MM,9,CalendarMonth))) as Fiscal,CalendarMonth,PriceIndexIdentifier,CurrencyOID,TradeHub,StrategyID,sum(Volume) as Volume,sum(MarktoMarket) as MTMPriorDay,sum(NG_Curvepnl) as NG_CurvePnL,sum(tradehubPnL) as TradeHubPnL,sum(BasisStrategyPnL) as BasisStrategyPnL,Previous_USDToCAD,USDToCAD
	from NaturalGas_CurvePnL_Risk
	where reportdate >= '20240227' and calendarmonth >= '20240401' and PriceIndexIdentifier = 'ConEd-Tier2'
	group by ReportDate,Portfolio,CONVERT(VARCHAR(4),YEAR(DATEADD(MM,9,CalendarMonth))),CalendarMonth,PriceIndexIdentifier,CurrencyOID,TradeHub,StrategyID,Previous_USDToCAD,USDToCAD")
C6$CalendarMonth<-as.Date(C6$CalendarMonth)
C6<-merge(C6,CashLockDates,by.x ="CalendarMonth", by.y="Months",all.x = TRUE)
C6$Include <- ifelse((is.na(C6$CashLocks)==TRUE | (is.na(C6$CashLocks)==FALSE & C6$ReportDate <=C6$CashLocks)),"Y","N")
C6$YTDStartToPromptMonth<-ifelse(C6$CalendarMonth <= DoDEnd,"Y","N")
C6$FiscalYear<-year(C6$CalendarMonth %m-%months(3))+1

C7<-dbGetQuery(EMSChannel,
	"SELECT *
	FROM EMSToEMS_Analytics.EMS_Analytics.dbo.Power_BlockPnLForPhysicalStrategy_Risk
	WHERE ReportDate >= '20240227' AND CalendarMonth >= '20240401' AND Portfolio <> 'CAISO'
	order by Reportdate")
C7$FX_Adjustment <- C7$MarktoMarket *(C7$USDToCAD - C7$Previous_USDToCAD)
C7$CalendarMonth <-as.Date(C7$CalendarMonth)
C7<-merge(C7,CashLockDates,by.x ="CalendarMonth", by.y="Months",all.x = TRUE)
C7$Include <- ifelse((is.na(C7$CashLocks)==TRUE | (is.na(C7$CashLocks)==FALSE & C7$ReportDate <=C7$CashLocks)),"Y","N")
C7$FiscalYear<-year(C7$CalendarMonth %m-%months(3))+1

C8<-dbGetQuery(EMSAnalyticsChannel,"
	select *
	from [dbo].[Capacity_CurvePnL]
	where reportdate >= '20240227' and CalendarMonth >= '20240401'
	order by ReportDate, CalendarMonth")
C8$CalendarMonth <-as.Date(C8$CalendarMonth)
C8$FiscalYear<-year(C8$CalendarMonth %m-%months(3))+1
C8<-merge(C8,CashLockDates,by.x ="CalendarMonth", by.y="Months",all.x = TRUE)
C8$Include <- ifelse((is.na(C8$CashLocks)==TRUE | (is.na(C8$CashLocks)==FALSE & C8$ReportDate <=C8$CashLocks)),"Y","N")
C8$ISO <- ifelse(substr(C8$PriceIndexIdentifier,1,2)=="NY","NYISO","Not Mapped")

C9<-dbGetQuery(EMSAnalyticsChannel,
	"select *
	from [dbo].[Capacity_InternalTransferPnL]
	where reportdate >= '20240227' and CalendarMonth >= '20240401'
	order by ReportDate, CalendarMonth")
C9$CalendarMonth <-as.Date(C9$CalendarMonth)
C9$FiscalYear<-year(C9$CalendarMonth %m-%months(3))+1
C9<-merge(C9,CashLockDates,by.x ="CalendarMonth", by.y="Months",all.x = TRUE)
C9$Include <- ifelse((is.na(C9$CashLocks)==TRUE | (is.na(C9$CashLocks)==FALSE & C9$ReportDate <=C9$CashLocks)),"Y","N")
C9$ISO <- ifelse(substr(C9$PriceIndexIdentifier,1,2)=="NY","NYISO","Not Mapped")

C10<-dbGetQuery(EMSAnalyticsChannel,"select *
	from [dbo].[Capacity_TradePnL]
	where reportdate >= '20240227' and CalendarMonth >= '20240401'
	order by ReportDate, CalendarMonth")
C10$CalendarMonth <-as.Date(C10$CalendarMonth)
C10$FiscalYear<-year(C10$CalendarMonth %m-%months(3))+1
C10<-merge(C10,CashLockDates,by.x ="CalendarMonth", by.y="Months",all.x = TRUE)
C10$Include <- ifelse((is.na(C10$CashLocks)==TRUE | (is.na(C10$CashLocks)==FALSE & C10$ReportDate <=C10$CashLocks)),"Y","N")
C10$ISO <- ifelse(substr(C10$PriceIndexIdentifier,1,2)=="NY","NYISO","Not Mapped")

C11<- dbGetQuery(PDBChannel,"
	select * from [PortfolioDB].[dbo].[MTMAdjustment] [M]
	inner join [MTMAdjustmentStaging] [S] ON [M].[MTMAdjustmentOID] = [S].MTMAdjustmentOID
	inner join [MTMAdjustmentDetail] [D] ON [S].[MTMAdjustmentStagingOID] = [D].MTMAdjustmentStagingOID
	where [M].db_insertDate >= '20240227' and [D].CalendarMonth >= '20240401'")
C11$CalendarMonth <-as.Date(C11$CalendarMonth)
C11$FiscalYear<-year(C11$CalendarMonth %m-%months(3))+1

HR1<-dbGetQuery(EMSAnalyticsChannel,
	"select PWR_CurvePnL,ReportDate,calendarmonth as CalendarMonth,bookoid
	from [power_curvePnL_risk] 
	where bookoid = 135 and reportdate >= '20240227' and calendarmonth >= '20240401'
	order by reportdate, calendarmonth")
HR1$CalendarMonth<-as.Date(HR1$CalendarMonth)
HR1<-merge(HR1,CashLockDates,by.x ="CalendarMonth", by.y="Months",all.x = TRUE)
HR1$FiscalYear<-year(HR1$CalendarMonth %m-%months(3))+1
HR1$Include <- ifelse((is.na(HR1$CashLocks)==TRUE | (is.na(HR1$CashLocks)==FALSE & HR1$ReportDate <=HR1$CashLocks)),"Y","N")

HR2<-dbGetQuery(EMSAnalyticsChannel,
	"select TradePnL,ReportDate,calendarmonth as CalendarMonth,bookoid
	from [Power_TradePnL_Risk]
	where bookoid = 135 and reportdate >= '20240227' and calendarmonth >= '20240401'
	order by reportdate, calendarmonth")
HR2$CalendarMonth<-as.Date(HR2$CalendarMonth)
HR2<-merge(HR2,CashLockDates,by.x ="CalendarMonth", by.y="Months",all.x = TRUE)
HR2$FiscalYear<-year(HR2$CalendarMonth %m-%months(3))+1
HR2$Include <- ifelse((is.na(HR2$CashLocks)==TRUE | (is.na(HR2$CashLocks)==FALSE & HR2$ReportDate <=HR2$CashLocks)),"Y","N")

}



## Pivot Table (And Unexplained maybe?) Section
## Section that generates pivot tables. Later aggregation currently requires this section to be active (as of version 1.0)
if(PivotTablesSection == 1){
	TradePnLPivot<-Q5[Q5$Include =="Y",] %>% group_by(CalendarMonth,Portfolio,ReportDate) %>% summarize("TradePnL" = sum(TradePnL,na.rm=TRUE))
	CurvePnLPivot<-Q9[Q9$Include =="Y",] %>% group_by(CalendarMonth,Portfolio,ReportDate) %>% summarize("CurvePnL" = sum(PWR_CurvePnL,na.rm=TRUE),"PriorDayMTM" = sum(PriorDayMTM,na.rm=TRUE))
	TransferPnLPivot<-Q6[Q6$Include =="Y",] %>% group_by(CalendarMonth,Portfolio,ReportDate) %>% summarize("TransferPnL" = sum(TransferPnL,na.rm=TRUE))
	Block4ShapePnLPivot<-Q7[Q7$Include =="Y",] %>% group_by(CalendarMonth,Portfolio,ReportDate) %>% summarize("Block4ShapePnL" = sum(PWR_CurvePnL,na.rm=TRUE),"PriorDayMTM" = sum(PriorDayMTM,na.rm=TRUE))
	PowerGasTradePnLPivot<-Q2[Q2$Include =="Y",] %>% group_by(CalendarMonth,ISO,ReportDate) %>% summarize("PowerGasTradePnL" = sum(TradePnL_TeamCurrency,na.rm=TRUE))
	PowerGasCurvePnLPivot <-Q3[Q3$Include =="Y",] %>% group_by(CalendarMonth,ISO,ReportDate) %>% summarize("PowerGasCurvePnL" = sum(NGCurvePnL_TeamCurrency,na.rm=TRUE))
	GasTradePnLPivot<-Q2[Q2$Include =="Y",] %>% group_by(CalendarMonth,Strategy2,ReportDate) %>% summarize("GasTradePnL_TeamCurrency" = sum(TradePnL_TeamCurrency,na.rm=TRUE),"GasTradePnL_TeamCurrency" = sum(TradePnL_TeamCurrency))
	GasCurvePnLPivot <-Q3[Q3$Include =="Y",] %>% group_by(CalendarMonth,Strategy2,ReportDate) %>% summarize("GasCurvePnL_TeamCurrency" = sum(NGCurvePnL_TeamCurrency,na.rm=TRUE),"PriorDayMTM_TeamCurrency" = sum(PriorDayMTMCheck,na.rm=TRUE),"MarktoMarketPriorDay" = sum(MarketoMarketPriorDay,na.rm=TRUE),"PriorDayMTM_TeamCurrency" = sum(PriorDayMTM_TeamCurrency,na.rm=TRUE), "FXAdjustmentCheck" =sum(FXAdjustmentCheck,na.rm =TRUE))
	WeatherPnLPivot<- Q8[Q8$Include=="Y",] %>% group_by(CalendarMonth,Portfolio,ReportDate) %>% summarize("WeatherPnL" =sum(PWR_CurvePnL,na.rm =TRUE),"MarktoMarket" =sum(MarktoMarket,na.rm =TRUE))
	TradePnLPivot$FiscalYear<-year(TradePnLPivot$CalendarMonth %m-%months(3))+1
	CurvePnLPivot$FiscalYear<-year(CurvePnLPivot$CalendarMonth %m-%months(3))+1
	TransferPnLPivot$FiscalYear<-year(TransferPnLPivot$CalendarMonth %m-%months(3))+1
	Block4ShapePnLPivot$FiscalYear<-year(Block4ShapePnLPivot$CalendarMonth %m-%months(3))+1
	PowerGasTradePnLPivot$FiscalYear<-year(PowerGasTradePnLPivot$CalendarMonth %m-%months(3))+1
	GasTradePnLPivot$FiscalYear<-year(GasTradePnLPivot$CalendarMonth %m-%months(3))+1
	WeatherPnLPivot$FiscalYear<-year(WeatherPnLPivot$CalendarMonth %m-%months(3))+1

## Unexplained Pivot calcs (no CalMonth breakdown, might be optional)
		TradeUnexplainedPnLPivot<-Q5 %>% group_by(Portfolio,ReportDate) %>% summarize("TradePnL" = sum(TradePnL,na.rm=TRUE))
		CurveUnexplainedPnLPivot<-Q9 %>% group_by(Portfolio,ReportDate) %>% summarize("CurvePnL" = sum(PWR_CurvePnL,na.rm=TRUE),"PriorDayMTM" = sum(PriorDayMTM,na.rm=TRUE))
		TransferUnexplainedPnLPivot<-Q6 %>% group_by(Portfolio,ReportDate) %>% summarize("TransferPnL" = sum(TransferPnL,na.rm=TRUE))
		Block4ShapeUnexplainedPnLPivot<-Q7 %>% group_by(Portfolio,ReportDate) %>% summarize("Block4ShapePnL" = sum(PWR_CurvePnL,na.rm=TRUE),"PriorDayMTM" = sum(PriorDayMTM,na.rm=TRUE))
		PowerGasTradeUnexplainedPnLPivot<-Q2[Q2$ISO !=0,] %>% group_by(ISO,ReportDate) %>% summarize("PowerGasTradePnL" = sum(TradePnL_TeamCurrency,na.rm=TRUE))
		PowerGasCurveUnexplainedPnLPivot <-Q3[Q3$ISO !=0,] %>% group_by(ISO,ReportDate) %>% summarize("PowerGasCurvePnL" = sum(NGCurvePnL_TeamCurrency,na.rm=TRUE),"PriorDayMTMCheck_TeamCurrency" = sum(PriorDayMTMCheck_TeamCurrency,na.rm=TRUE))
		GasTradeUnexplainedPnLPivot<-Q2 %>% group_by(Strategy2,ReportDate) %>% summarize("GasTradePnL_TeamCurrency" = sum(TradePnL_TeamCurrency,na.rm=TRUE))
		GasCurveUnexplainedPnLPivot <-Q3 %>% group_by(Strategy2,ReportDate) %>% summarize("GasCurvePnL_TeamCurrency" = sum(NGCurvePnL_TeamCurrency,na.rm=TRUE),"PriorDayMTMCheck_TeamCurrency" = sum(PriorDayMTMCheck_TeamCurrency,na.rm=TRUE),"MarktoMarketPriorDay" = sum(MarketoMarketPriorDay,na.rm=TRUE), "FXAdjustmentCheck" = sum(FXAdjustmentCheck))
		WeatherUnexplainedPnLPivot<- Q8 %>% group_by(Portfolio,ReportDate) %>% summarize("WeatherPnL" =sum(PWR_CurvePnL,na.rm =TRUE),"MarktoMarket" =sum(MarktoMarket,na.rm =TRUE))
		GasTransferUnexplainedPivot<- Q4 %>% group_by(Strategy2,ReportDate) %>% summarize("TransferPnL_TeamCurrency" = sum(TransferPnL_TeamCurrency))
}

## Unexplained section: compares each day's curve DoD with each other to show if report is missing a late modification that isn't being captured.

if (UnexplainedSection == 1){
UnexplainedDoDStart <-DoDStart
Unexplained<-c("Strategic NYMEX","UnitedStates Wholesale","Canada Wholesale","Corporate FX","Trading FX","Dawn Collateral","ERCOT","PJM","NYISO","ISO-NE","MISO","IESO","AESO")
Unexplained<-data.frame("ReportDate" = rep(unique(GasCurvePnLPivot$ReportDate),each =length(Unexplained)),
"Market" = rep(c(Unexplained),length(unique(GasCurvePnLPivot$ReportDate))))

Unexplained$EODPrior<-0
Unexplained$EODPrior[Unexplained$Market !=c("Strategic NYMEX") & Unexplained$Market %in% unique(Q3$Strategy2)] <-
	mapply(function(x,y) sum(GasCurveUnexplainedPnLPivot$PriorDayMTMCheck_TeamCurrency[GasCurveUnexplainedPnLPivot$Strategy2 == x & GasCurveUnexplainedPnLPivot$ReportDate ==y]
	,na.rm=TRUE)
	,x= Unexplained$Market[Unexplained$Market !=c("Strategic NYMEX") & Unexplained$Market %in% unique(Q3$Strategy2)],y= Unexplained$ReportDate[Unexplained$Market !=c("Strategic NYMEX") & Unexplained$Market %in% unique(Q3$Strategy2)])

Unexplained$EODPrior[Unexplained$Market %in% c("Strategic NYMEX")] <-
	mapply(function(x,y) sum(GasCurveUnexplainedPnLPivot$MarktoMarketPriorDay[GasCurveUnexplainedPnLPivot$Strategy2 == x & GasCurveUnexplainedPnLPivot$ReportDate ==y]
	,na.rm=TRUE)
	,x= Unexplained$Market[Unexplained$Market %in% c("Strategic NYMEX")],y= Unexplained$ReportDate[Unexplained$Market %in% c("Strategic NYMEX")])

Unexplained$EODPrior[Unexplained$Market %in% c("ERCOT","NYISO","ISO-NE","AESO","MISO","PJM","IESO")] <-
mapply(function(x,y,z) sum(CurveUnexplainedPnLPivot$PriorDayMTM[CurveUnexplainedPnLPivot$Portfolio == x & CurveUnexplainedPnLPivot$ReportDate ==y]
	,WeatherUnexplainedPnLPivot$MarktoMarket[WeatherUnexplainedPnLPivot$Portfolio == x & WeatherUnexplainedPnLPivot$ReportDate ==y]
	,Block4ShapeUnexplainedPnLPivot$PriorDayMTM[Block4ShapeUnexplainedPnLPivot$Portfolio == x & Block4ShapeUnexplainedPnLPivot$ReportDate ==y]
	,na.rm=TRUE)
	+z,x= Unexplained$Market[Unexplained$Market %in% c( c("XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX"))],y= Unexplained$ReportDate[Unexplained$Market %in% c("ERCOT","NYISO","ISO-NE","AESO","MISO","IESO","PJM")], z =Unexplained$EODPrior[Unexplained$Market %in% c("ERCOT","NYISO","ISO-NE","AESO","MISO","IESO","PJM")])

Unexplained$CurveTradeTransferWeatherB4SFXAdjPnL<-0
Unexplained$CurveTradeTransferWeatherB4SFXAdjPnL[Unexplained$Market %in% c("XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX")]<-
	mapply(function(x,y) sum(CurveUnexplainedPnLPivot$CurvePnL[CurveUnexplainedPnLPivot$Portfolio ==x & CurveUnexplainedPnLPivot$ReportDate ==y]
	,TradeUnexplainedPnLPivot$TradePnL[TradeUnexplainedPnLPivot$Portfolio ==x & TradeUnexplainedPnLPivot$ReportDate ==y]
	,TransferUnexplainedPnLPivot$TransferPnL[TransferUnexplainedPnLPivot$Portfolio ==x & TransferUnexplainedPnLPivot$ReportDate ==y]
	,WeatherUnexplainedPnLPivot$WeatherPnL[WeatherUnexplainedPnLPivot$Portfolio ==x & WeatherUnexplainedPnLPivot$ReportDate ==y]
	,Block4ShapeUnexplainedPnLPivot$Block4ShapePnL[Block4ShapeUnexplainedPnLPivot$Portfolio ==x & Block4ShapeUnexplainedPnLPivot$ReportDate ==y]
	,na.rm=TRUE)
	,x = Unexplained$Market[Unexplained$Market %in% c("XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX")],y= Unexplained$ReportDate[Unexplained$Market %in%  c("XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX")])

Unexplained$CurveTradeTransferWeatherB4SFXAdjPnL[Unexplained$Market %in% c("PJM","IESO")]<-mapply(function(x,y) Unexplained$CurveTradeTransferWeatherB4SFXAdjPnL[Unexplained$Market ==x & Unexplained$ReportDate ==y] +
	sum(PowerGasTradeUnexplainedPnLPivot$PowerGasTradePnL[PowerGasTradeUnexplainedPnLPivot$ReportDate == y & PowerGasTradeUnexplainedPnLPivot$ISO ==x]
	,PowerGasCurveUnexplainedPnLPivot$PowerGasCurvePnL[PowerGasCurveUnexplainedPnLPivot$ReportDate == y & PowerGasCurveUnexplainedPnLPivot$ISO ==x]
	,na.rm=TRUE)
	,x = Unexplained$Market[Unexplained$Market %in% c("PJM","IESO")],y= Unexplained$ReportDate[Unexplained$Market %in% c("PJM","IESO")])

Unexplained$EODPrior[Unexplained$Market %in% c("PJM","IESO")]<-mapply(function(x,y) Unexplained$EODPrior[Unexplained$Market ==x & Unexplained$ReportDate ==y] +
	sum(PowerGasCurveUnexplainedPnLPivot$PriorDayMTMCheck_TeamCurrency[PowerGasCurveUnexplainedPnLPivot$ReportDate == y & PowerGasCurveUnexplainedPnLPivot$ISO ==x]
	,na.rm=TRUE),x = Unexplained$Market[Unexplained$Market %in% c("PJM","IESO")],y= Unexplained$ReportDate[Unexplained$Market %in% c("PJM","IESO")])

Unexplained$CurveTradeTransferWeatherB4SFXAdjPnL[Unexplained$Market =="IESO"] <- sapply(Unexplained$ReportDate[Unexplained$Market =="IESO"],function(x) 
	sum(GasCurveUnexplainedPnLPivot$FXAdjustmentCheck[GasCurveUnexplainedPnLPivot$Strategy2 =="CAN Power" & GasCurveUnexplainedPnLPivot$ReportDate ==x]
	,Unexplained$CurveTradeTransferWeatherB4SFXAdjPnL[Unexplained$Market =="IESO" &Unexplained$ReportDate ==x]
	,na.rm =TRUE))

Unexplained$CurveTradeTransferWeatherB4SFXAdjPnL[Unexplained$Market %in%  c("XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX")] <-mapply(function(x,y)
	sum(GasCurveUnexplainedPnLPivot[GasCurveUnexplainedPnLPivot$Strategy2 == x & GasCurveUnexplainedPnLPivot$ReportDate ==y,c("GasCurvePnL_TeamCurrency","FXAdjustmentCheck")]
	,GasTradeUnexplainedPnLPivot$GasTradePnL_TeamCurrency[GasTradeUnexplainedPnLPivot$Strategy2 == x & GasTradeUnexplainedPnLPivot$ReportDate ==y]
	,GasTransferUnexplainedPivot$TransferPnL_TeamCurrency[GasTransferUnexplainedPivot$Strategy2 ==x & GasTransferUnexplainedPivot$ReportDate ==y],na.rm=TRUE)
	,x= Unexplained$Market[Unexplained$Market %in%  c("XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX")]
	,y= Unexplained$ReportDate[Unexplained$Market %in% c c("XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX")])

Unexplained$CurrentMTM = Unexplained$EODPrior + Unexplained$CurveTradeTransferWeatherB4SFXAdjPnL
Unexplained<-Unexplained[order(Unexplained$Market,Unexplained$ReportDate),]
Unexplained$DoDUnexplained<-round(Unexplained$EODPrior - lag(Unexplained$CurrentMTM,default =0),0)
Unexplained$DoDUnexplained[Unexplained$ReportDate == min(GasCurvePnLPivot$ReportDate)] <-0
UnexplainedPivot <- Unexplained %>% group_by(ReportDate) %>% summarize("TotalUnexplained"  =round(sum(DoDUnexplained),0))
}

## Summary tab on the Excel file, can probably be optimized, like by referencing the pivots for faster aggregation and preallocating memory for the FinalFiscal and DoDGas/Power tables.

FinalDoDPower<-numeric()
FinalDoDGas<-numeric()
FinalFiscalPower<-numeric()
FinalFiscalGas<-numeric()
FinalFiscalSecondaries<-numeric()
FinalDoDPowerFiscal <-numeric()
FinalDoDPowerMonthly <-numeric()

## Loops through the different starting points we want to see on this report.
for (i in seq_along(DateCounter)){
	DateCounter1<-DateCounter[i]
	DoDStart <-DateCounterDates[i]
DoDGas<-data.frame("Strategy" =  c("XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX")),"Currency" = c("XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX"))
DoDGas$TradeHubPnL<-sapply(DoDGas$Strategy,function(x) sum(Q3$TradeHubPnL_TeamCurrency[Q3$ReportDate >DoDStart & Q3$ReportDate <=DoDEnd & Q3$Strategy2 ==x & Q3$Include =="Y"],na.rm=TRUE))
DoDGas$TradeHubPnL[DoDGas$Strategy =="UnitedStates Wholesale"]<-DoDGas$TradeHubPnL[DoDGas$Strategy =="UnitedStates Wholesale"] - sum(C6$TradeHubPnL[C6$ReportDate<=DoDEnd & C6$ReportDate >DoDStart & C6$Include =="Y"],na.rm=TRUE)
DoDGas$BasisPnL<-sapply(DoDGas$Strategy,function(x) 
	sum(Q3$BasisStrategyPnL_TeamCurrency[Q3$ReportDate >DoDStart & Q3$ReportDate <=DoDEnd & Q3$Strategy2 ==x & Q3$Include =="Y"],na.rm=TRUE))
DoDGas$BasisPnL[DoDGas$Strategy =="UnitedStates Wholesale"]<-DoDGas$BasisPnL[DoDGas$Strategy =="UnitedStates Wholesale"] - sum(C6$BasisStrategyPnL[C6$ReportDate<=DoDEnd & C6$ReportDate >DoDStart & C6$Include =="Y"],na.rm=TRUE)
DoDGas$TradePnL<-sapply(DoDGas$Strategy,function(x) sum(Q2$TradePnL_TeamCurrency[Q2$ReportDate >DoDStart & Q2$ReportDate <=DoDEnd & Q2$Strategy2 ==x & Q2$Include =="Y"],na.rm=TRUE))
DoDGas$TransferPnL<-sapply(DoDGas$Strategy,function(x)   sum(Q4$TransferPnL_TeamCurrency[Q4$ReportDate > DoDStart & Q4$ReportDate <=DoDEnd & Q4$Strategy2 ==x & Q4$ObligationType != "MTMAdjustment" & Q4$Include =="Y"],na.rm=TRUE))
DoDGas$MTMAdjustment<-sapply(DoDGas$Strategy,function(x) sum(Q4$TransferPnL_TeamCurrency[Q4$ReportDate > DoDStart & Q4$ReportDate <=DoDEnd & Q4$Strategy2 ==x & Q4$ObligationType == "MTMAdjustment" & Q4$Include =="Y"],na.rm=TRUE))
DoDGas$FXAdjustment<-sapply(DoDGas$Strategy,function(x) sum(Q3$FXAdjustmentCheck[Q3$ReportDate > DoDStart & Q3$ReportDate <=DoDEnd & Q3$Strategy2 ==x & Q3$Include =="Y"],na.rm=TRUE))
## Redo gas Financing here. Dawn collateral??
##DoDGas[,-1:-2] <-round(DoDGas[,-1:-2],0)

DoDPower<-data.frame("ISO" =  c("XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX"),"Currency" =  c("XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX"))
DoDPower$HubBlockPnL[DoDPower$ISO =="IESO"]<-sapply(DoDPower$ISO[DoDPower$ISO =="IESO"],function(x)
	sum(Q9[Q9$ReportDate >DoDStart & Q9$ReportDate <=DoDEnd & Q9$Portfolio ==x & Q9$Include =="Y","TradeHubBlockPnL"],
	sum(C7[C7$ReportDate<=DoDEnd & C7$ReportDate >DoDStart & C7$Include =="Y" ,c("FX_Adjustment","PWR_CurvePnL")],na.rm=TRUE)))
DoDPower$HubBlockPnL[DoDPower$ISO !="IESO"]<-sapply(DoDPower$ISO[DoDPower$ISO !="IESO"], function(x)
	sum(Q9[Q9$ReportDate >DoDStart & Q9$ReportDate <=DoDEnd & Q9$Portfolio ==x & Q9$Include =="Y","TradeHubBlockPnL"],na.rm=TRUE))
DoDPower$HubBlockPnL[DoDPower$ISO %in% c("IESO","PJM")] <- sapply(DoDPower$ISO[DoDPower$ISO %in% c("IESO","PJM")],function(x) 
	DoDPower$HubBlockPnL[DoDPower$ISO ==x] 
	+ sum(C11$Cost[C11$LedgerDate >DoDStart & C11$LedgerDate <=DoDEnd & C11$SystemOperatorIdentifier ==x],na.rm=TRUE))
DoDPower$Shaping<-sapply(DoDPower$ISO,function(x) sum(Q7$PWR_CurvePnL[Q7$ReportDate >DoDStart & Q7$ReportDate <=DoDEnd & Q7$Portfolio ==x & Q7$Include =="Y"],
	Q2$TradePnL_TeamCurrency[Q2$ReportDate >DoDStart & Q2$ReportDate <=DoDEnd & Q2$ISO ==x & Q2$Strategy1 =="US Power: ERCOT Shape"],
	Q3$NGCurvePnL_TeamCurrency[Q3$ReportDate >DoDStart & Q3$ReportDate <=DoDEnd & Q3$ISO ==x & Q3$Strategy1 =="US Power: ERCOT Shape"],na.rm=TRUE))
DoDPower$Shaping[DoDPower$ISO =="ERCOT"] <-sapply(DoDPower$ISO[DoDPower$ISO =="ERCOT"], function(x) 
	DoDPower$Shaping[DoDPower$ISO =="ERCOT"] 
	+ sum(Q9[Q9$ReportDate >DoDStart & Q9$ReportDate <=DoDEnd & Q9$Portfolio == x & Q9$Include =="Y",c("TradeHubShapePnL","HubtoHubShapePnL")],na.rm=TRUE))
DoDPower$Shaping[DoDPower$ISO !="ERCOT"] <-DoDPower$Shaping[DoDPower$ISO !="ERCOT"] + sapply(DoDPower$ISO[DoDPower$ISO !="ERCOT"],function(x) 
	sum(Q9[Q9$ReportDate >DoDStart & Q9$ReportDate <=DoDEnd & Q9$Portfolio == x & Q9$Include =="Y",c("TradeHubShapePnL","HubtoHubShapePnL","HubtoLZShapePnL")],na.rm=TRUE))
DoDPower$BasisBlockPnL<-sapply(DoDPower$ISO,function(x) 
	sum(Q9$HubtoHubBasisStrategyBlockPnL[Q9$Include =="Y" & Q9$ReportDate >DoDStart & Q9$ReportDate <=DoDEnd & Q9$Portfolio ==x])
	+sum(Q9$HubtoLZBasisStrategyBlockPnL[Q9$Include =="Y" & Q9$ReportDate >DoDStart & Q9$ReportDate <=DoDEnd & Q9$Portfolio ==x & Q9$Portfolio !="ERCOT"],na.rm=TRUE))
DoDPower$TradeAndTransferPnL<-sapply(DoDPower$ISO,function(x) 
	sum(Q5$TradePnL[Q5$Portfolio ==x & Q5$ReportDate >DoDStart & Q5$ReportDate <=DoDEnd & Q5$Include =="Y" & !(Q5$BookOID %in% c(293,365,133))],Q6$TransferPnL[Q6$ReportDate >DoDStart & Q6$ReportDate <=DoDEnd & Q6$Portfolio ==x & Q6$Include =="Y"],na.rm=TRUE))
DoDPower$GasPnL<-sapply(DoDPower$ISO,function(x) 
	sum(Q2$TradePnL_TeamCurrency[Q2$ReportDate >DoDStart & Q2$ReportDate <=DoDEnd & Q2$Strategy2 =="CAN Power" & Q2$ISO ==x &Q2$Include =="Y"]) 
	+ sum(Q3[Q3$ReportDate >DoDStart & Q3$ReportDate <=DoDEnd & Q3$ISO ==x & Q3$Strategy2 =="CAN Power" & Q3$Include =="Y",c("NGCurvePnL_TeamCurrency","FXAdjustmentCheck")],na.rm=TRUE))
DoDPower$WeatherBooks<-sapply(DoDPower$ISO,function(x) 
	sum(Q8$PWR_CurvePnL[Q8$ReportDate >DoDStart & Q8$ReportDate <=DoDEnd & Q8$Portfolio ==x & Q8$Include =="Y"]
	,Q2$TradePnL_TeamCurrency[Q2$ReportDate >DoDStart & Q2$ReportDate <=DoDEnd & Q2$ISO ==x & Q2$Strategy2 =="US Power: NE Weather" & Q2$Include =="Y"]
	,Q3[Q3$ReportDate >DoDStart & Q3$ReportDate <=DoDEnd & Q3$Strategy2 =="US Power: NE Weather" & Q3$ISO ==x & Q3$Include =="Y","NGCurvePnL_TeamCurrency"]
	,Q5$TradePnL[Q5$ReportDate > DoDStart & Q5$ReportDate <= DoDEnd & Q5$Include =="Y" & Q5$Portfolio ==x & Q5$BookOID ==293]
	,na.rm=TRUE))
DoDPower$"USPower:ERCOT Hub To LZ Basis PnL"<- sapply(DoDPower$ISO, function(x) sum(Q9$HubtoLZBasisStrategyPnL[Q9$ReportDate > DoDStart & Q9$ReportDate <=DoDEnd & Q9$Portfolio ==x & Q9$Portfolio =="ERCOT" & Q9$Include =="Y"]))
##DoDPower$PowerFinancing<-sapply(DoDPower$ISO, function(x) sum(Q5$TradePnL[Q5$ReportDate >DoDStart & Q5$ReportDate<=DoDEnd & Q5$Portfolio ==x & Q5$BookOID ==365 & Q5$Include =="Y"]))
DoDPower$NYCapacity <-sapply(DoDPower$ISO, function(x) sum(C8$Capacity_CurvePnL[C8$ReportDate >DoDStart & C8$ReportDate<=DoDEnd & C8$ISO ==x & C8$Include =="Y"],C9$Capacity_TransferPnL[C9$ReportDate >DoDStart & C9$ReportDate<=DoDEnd & C9$ISO ==x & C9$Include =="Y"],C10$TradePnL[C10$ReportDate >DoDStart & C10$ReportDate<=DoDEnd & C10$ISO ==x  & C10$Include =="Y"],na.rm=TRUE))
DoDPower$"IESO HR Strategy"<-0
DoDPower$"IESO HR Strategy"[DoDPower$ISO =="IESO"]<-sapply(DoDPower$ISO[DoDPower$ISO =="IESO"],function(c) sum(HR1$PWR_CurvePnL[HR1$ReportDate>DoDStart & HR1$ReportDate<=DoDEnd & HR1$Include =="Y"],HR2$TradePnL[HR2$ReportDate>DoDStart & HR2$ReportDate<=DoDEnd & HR2$Include =="Y"],na.rm=TRUE))
DoDPower$"IESO HR Strategy"[DoDPower$ISO =="IESO"]<-DoDPower$"IESO HR Strategy"[DoDPower$ISO =="IESO"]+DoDPower$"GasPnL"[DoDPower$ISO =="IESO"]
DoDPower$"IESOPJMStrategy"<-sapply(DoDPower$ISO[DoDPower$ISO =="IESO"],function(c) 
	sum(C7$PWR_CurvePnL[C7$Portfolio == c & C7$ReportDate >DoDStart & C7$ReportDate <=DoDEnd & C7$Include =="Y"],
	Q5$TradePnL[Q5$Portfolio ==c & Q5$ReportDate >DoDStart & Q5$ReportDate <=DoDEnd & Q5$Include =="Y" & Q5$BookOID ==311 & Q5$PriceIndexIdentifier =="PJM"],na.rm=TRUE))
#DoDPower[,-1:-2] <-round(DoDPower[,-1:-2],0)

## This section breaks out each component of the Power main DoD table by Fiscal Year, across all markets.
DoDPowerFiscal<-data.frame("ISO" = rep(c("ERCOT","PJM","NYISO","ISO-NE","MISO","IESO","AESO"),each=length(2025:2036)),"FiscalYear" = rep(2025:2036,7))
DoDPowerFiscal$HubBlockPnL[DoDPowerFiscal$ISO =="IESO"]<-mapply(function(x,y) sum(Q9$TradeHubBlockPnL[Q9$ReportDate >DoDStart & Q9$ReportDate <=DoDEnd & Q9$Portfolio ==x & Q9$Include =="Y" & Q9$FiscalYear ==y]
	,sum(C7[C7$ReportDate<=DoDEnd & C7$ReportDate >DoDStart & C7$Include =="Y" & C7$FiscalYear ==y,c("FX_Adjustment","PWR_CurvePnL")],na.rm=TRUE))
	,x = DoDPowerFiscal$ISO[DoDPowerFiscal$ISO =="IESO"] ,y = DoDPowerFiscal$FiscalYear[DoDPowerFiscal$ISO =="IESO"])
DoDPowerFiscal$HubBlockPnL[DoDPowerFiscal$ISO !="IESO"]<-mapply(function(x,y) sum(Q9$TradeHubBlockPnL[Q9$ReportDate >DoDStart & Q9$ReportDate <=DoDEnd & Q9$Portfolio ==x & Q9$Include =="Y" & Q9$FiscalYear ==y],na.rm=TRUE)
	,x= DoDPowerFiscal$ISO[DoDPowerFiscal$ISO !="IESO"], y = DoDPowerFiscal$FiscalYear[DoDPowerFiscal$ISO =="IESO"])
DoDPowerFiscal$HubBlockPnL[DoDPowerFiscal$ISO %in% c("IESO","PJM")] <- mapply(function(x,y) 
	sum(DoDPowerFiscal$HubBlockPnL[DoDPowerFiscal$ISO ==x & DoDPowerFiscal$FiscalYear ==y],
	C11$Cost[C11$LedgerDate >DoDStart & C11$LedgerDate <=DoDEnd & C11$SystemOperatorIdentifier ==x & C11$FiscalYear ==y],na.rm=TRUE)
	,x = DoDPowerFiscal$ISO[DoDPowerFiscal$ISO %in% c("IESO","PJM")], y = DoDPowerFiscal$FiscalYear[DoDPowerFiscal$ISO %in% c("IESO","PJM")])
DoDPowerFiscal$Shaping<-mapply(function(x,y) sum(Q7$PWR_CurvePnL[Q7$ReportDate >DoDStart & Q7$ReportDate <=DoDEnd & Q7$Portfolio ==x & Q7$Include =="Y" & Q7$FiscalYear ==y]
	,Q2$TradePnL_TeamCurrency[Q2$ReportDate >DoDStart & Q2$ReportDate <=DoDEnd & Q2$ISO ==x & Q2$Strategy1 =="US Power: ERCOT Shape" & Q2$FiscalYear ==y]
	,Q3$NGCurvePnL_TeamCurrency[Q3$ReportDate >DoDStart & Q3$ReportDate <=DoDEnd & Q3$ISO ==x & Q3$Strategy1 =="US Power: ERCOT Shape" & Q3$FiscalYear ==y],na.rm=TRUE)
	,x = DoDPowerFiscal$ISO,y = DoDPowerFiscal$FiscalYear[DoDPowerFiscal$ISO =="IESO"])
DoDPowerFiscal$Shaping[DoDPowerFiscal$ISO =="ERCOT"] <-DoDPowerFiscal$Shaping[DoDPowerFiscal$ISO == "ERCOT"]+ mapply(function(x,y) sum(Q9[Q9$ReportDate >DoDStart & Q9$ReportDate <=DoDEnd & Q9$Portfolio == x & Q9$Include =="Y" & Q9$FiscalYear ==y,c("TradeHubShapePnL","HubtoHubShapePnL")],na.rm=TRUE)
	,x = DoDPowerFiscal$ISO[DoDPowerFiscal$ISO =="ERCOT"],y = DoDPowerFiscal$FiscalYear[DoDPowerFiscal$ISO =="ERCOT"])
DoDPowerFiscal$Shaping[DoDPowerFiscal$ISO !="ERCOT"] <-DoDPowerFiscal$Shaping[DoDPowerFiscal$ISO !="ERCOT"] + mapply(function(x,y) sum(Q9[Q9$ReportDate >DoDStart & Q9$ReportDate <=DoDEnd & Q9$Portfolio == x & Q9$Include =="Y" & Q9$FiscalYear ==y,c("TradeHubShapePnL","HubtoHubShapePnL","HubtoLZShapePnL")],na.rm=TRUE)
	,x = DoDPowerFiscal$ISO[DoDPowerFiscal$ISO !="ERCOT"],y = DoDPowerFiscal$FiscalYear[DoDPowerFiscal$ISO !="ERCOT"])
DoDPowerFiscal$BasisBlockPnL<-mapply(function(x,y) sum(Q9$HubtoHubBasisStrategyBlockPnL[Q9$Include =="Y" & Q9$ReportDate >DoDStart & Q9$ReportDate <=DoDEnd & Q9$Portfolio ==x & Q9$FiscalYear ==y])
	+ sum(Q9$HubtoLZBasisStrategyBlockPnL[Q9$Include =="Y" & Q9$ReportDate >DoDStart & Q9$ReportDate <=DoDEnd & Q9$Portfolio ==x & Q9$Portfolio !="ERCOT" & Q9$FiscalYear ==y],na.rm=TRUE)
	,x = DoDPowerFiscal$ISO,y =DoDPowerFiscal$FiscalYear[DoDPowerFiscal$ISO =="IESO"])
DoDPowerFiscal$TradeAndTransferPnL<-mapply(function(x,y) sum(Q5$TradePnL[Q5$Portfolio ==x & Q5$Fiscal ==y & Q5$ReportDate >DoDStart & Q5$ReportDate <=DoDEnd & Q5$Include =="Y" & !(Q5$BookOID %in% c(293,365,133))],na.rm=TRUE)
	+ sum(Q6$TransferPnL[Q6$Fiscal == y & Q6$ReportDate >DoDStart & Q6$ReportDate <=DoDEnd & Q6$Portfolio ==x & Q6$Include =="Y"],na.rm=TRUE)
	,x = DoDPowerFiscal$ISO,y = DoDPowerFiscal$FiscalYear[DoDPowerFiscal$ISO =="IESO"])
DoDPowerFiscal$GasPnL <- mapply(function(x,y) sum(Q2$TradePnL_TeamCurrency[Q2$ISO ==x & Q2$FiscalYear == y & Q2$ReportDate >DoDStart & Q2$ReportDate <=DoDEnd & Q2$Strategy2 =="CAN Power" & Q2$Include =="Y"])
	+ sum(Q3[Q3$ISO ==x & Q3$FiscalYear ==y & Q3$ReportDate >DoDStart & Q3$ReportDate <=DoDEnd & Q3$Strategy2 =="CAN Power" & Q3$Include =="Y",c("NGCurvePnL_TeamCurrency","FXAdjustmentCheck")],na.rm=TRUE)
	,x = DoDPowerFiscal$ISO,y = DoDPowerFiscal$FiscalYear[DoDPowerFiscal$ISO =="IESO"])
DoDPowerFiscal$WeatherBooks<-mapply(function(x,y) sum(Q8$PWR_CurvePnL[Q8$ReportDate >DoDStart & Q8$ReportDate <=DoDEnd & Q8$Portfolio ==x & Q8$Include =="Y" & Q8$FiscalYear ==y]
	,Q2$TradePnL_TeamCurrency[Q2$FiscalYear == y & Q2$ReportDate >DoDStart & Q2$ReportDate <=DoDEnd & Q2$ISO ==x & Q2$Strategy2 =="US Power: NE Weather" & Q2$Include =="Y"]
	,Q3[Q3$FiscalYear ==y & Q3$ReportDate >DoDStart & Q3$ReportDate <=DoDEnd & Q3$Strategy2 =="US Power: NE Weather" & Q3$ISO ==x & Q3$Include =="Y","NGCurvePnL_TeamCurrency"]
	,Q5$TradePnL[Q5$Fiscal == y & Q5$ReportDate > DoDStart & Q5$ReportDate <= DoDEnd & Q5$Include =="Y" & Q5$Portfolio ==x & Q5$BookOID ==293],na.rm=TRUE)
	,x = DoDPowerFiscal$ISO,y = DoDPowerFiscal$FiscalYear[DoDPowerFiscal$ISO =="IESO"])
DoDPowerFiscal$"USPower:ERCOT Hub To LZ Basis PnL"<-0
DoDPowerFiscal$"USPower:ERCOT Hub To LZ Basis PnL"[DoDPowerFiscal$ISO =="ERCOT"]<- mapply(function(x,y) sum(Q9$HubtoLZBasisStrategyPnL[Q9$ReportDate > DoDStart & Q9$ReportDate <=DoDEnd & Q9$Portfolio ==x & Q9$Include =="Y" & Q9$FiscalYear == y])
	,x = DoDPowerFiscal$ISO[DoDPowerFiscal$ISO =="ERCOT"],y = DoDPowerFiscal$FiscalYear[DoDPowerFiscal$ISO =="ERCOT"])
DoDPowerFiscal$NYCapacity <- mapply(function(x,y) sum(C8$Capacity_CurvePnL[C8$ISO ==x & C8$FiscalYear ==y & C8$ReportDate >DoDStart & C8$ReportDate<=DoDEnd & C8$Include =="Y"]
	,C9$Capacity_TransferPnL[C9$ISO ==x & C9$FiscalYear ==y & C9$ReportDate >DoDStart & C9$ReportDate<=DoDEnd & C9$Include =="Y"]
	,C10$TradePnL[C10$ISO ==x & C10$FiscalYear == y & C10$ReportDate >DoDStart & C10$ReportDate<=DoDEnd & C10$Include =="Y"],na.rm=TRUE)
	,x  = DoDPowerFiscal$ISO,y = DoDPowerFiscal$FiscalYear)
DoDPowerFiscal$"IESO HR Strategy"<-0
DoDPowerFiscal$"IESO HR Strategy"[DoDPowerFiscal$ISO =="IESO"]<- sapply(DoDPowerFiscal$FiscalYear[DoDPowerFiscal$ISO =="IESO"], function(y) sum(HR1$PWR_CurvePnL[HR1$ReportDate>DoDStart & HR1$ReportDate<=DoDEnd & HR1$Include =="Y" & HR1$FiscalYear ==y]
	,HR2$TradePnL[HR2$ReportDate>DoDStart & HR2$ReportDate<=DoDEnd & HR2$Include =="Y" & HR2$FiscalYear ==y],na.rm=TRUE))
DoDPowerFiscal$"IESO HR Strategy"[DoDPowerFiscal$ISO =="IESO"]<-sapply(DoDPowerFiscal$FiscalYear[DoDPowerFiscal$ISO == "IESO"],
	function(y) sum(DoDPowerFiscal$"IESO HR Strategy"[DoDPowerFiscal$ISO =="IESO" & DoDPowerFiscal$FiscalYear ==y],
	DoDPowerFiscal$"GasPnL"[DoDPowerFiscal$ISO =="IESO" & DoDPowerFiscal$FiscalYear ==y]))


FiscalPower<-data.frame("ISO" = rep(c("ERCOT","PJM","NYISO","ISO-NE","MISO","IESO","AESO"),length(c(1,2025:2036))),"FiscalYear" = rep(c(1,2025:2036),length(c("ERCOT","PJM","NYISO","ISO-NE","MISO","IESO","AESO"))))

## Fiscal Year primary calcs (Unexplained is added manually to force user to document/understand the source of unexplained!!)

FiscalPower$PrimaryTrading[FiscalPower$ISO =="ERCOT"] <- mapply(function(x,y) -1*sum(Q9$HubtoLZBasisStrategyPnL[Q9$ReportDate > DoDStart & Q9$ReportDate <=DoDEnd & Q9$Portfolio ==x & Q9$FiscalYear ==y & Q9$Include =="Y"],na.rm=TRUE)
	,x = FiscalPower$ISO[FiscalPower$ISO =="ERCOT"],y=FiscalPower$FiscalYear[FiscalPower$ISO =="ERCOT"])

FiscalPower$PrimaryTrading[FiscalPower$ISO =="IESO"] <- mapply(function(x,y) 
	sum(C11$Cost[C11$LedgerDate > DoDStart & C11$LedgerDate <= DoDEnd & C11$SystemOperatorIdentifier == x & C11$FiscalYear == y],na.rm=TRUE)+sum(
	C7[C7$ReportDate >DoDStart & C7$ReportDate <=DoDEnd & C7$FiscalYear ==y,c("PWR_CurvePnL","FX_Adjustment")]
	,PowerGasTradePnLPivot$PowerGasTradePnL[PowerGasTradePnLPivot$ReportDate >DoDStart & PowerGasTradePnLPivot$ReportDate <=DoDEnd & PowerGasTradePnLPivot$FiscalYear ==y & PowerGasTradePnLPivot$ISO ==x]
	,Q3[Q3$ReportDate > DoDStart & Q3$ReportDate <= DoDEnd & Q3$FiscalYear ==y & Q3$Include =="Y" & Q3$StrategyID ==178, c("FXAdjustmentCheck","NGCurvePnL_TeamCurrency")],na.rm=TRUE)
	,x = FiscalPower$ISO[FiscalPower$ISO =="IESO"],y=FiscalPower$FiscalYear[FiscalPower$ISO =="IESO"])

FiscalPower$PrimaryTrading[FiscalPower$ISO %in% c("ERCOT","IESO")==FALSE] <- mapply(function(x,y) sum(C11$Cost[C11$SystemOperatorIdentifier == x & C11$LedgerDate > DoDStart & C11$LedgerDate <= DoDEnd & C11$FiscalYear ==y],na.rm=TRUE)
	,x = FiscalPower$ISO[FiscalPower$ISO %in% c("ERCOT","IESO")==FALSE],y=FiscalPower$FiscalYear[FiscalPower$ISO %in% c("ERCOT","IESO")==FALSE])

##CHECK THIS FOR AESO

FiscalPower$PrimaryTrading<- FiscalPower$PrimaryTrading + mapply(function(x,y) 
	sum(CurvePnLPivot$CurvePnL[CurvePnLPivot$Portfolio ==x & CurvePnLPivot$ReportDate > DoDStart & CurvePnLPivot$ReportDate <= DoDEnd & CurvePnLPivot$FiscalYear ==y]
	,Block4ShapePnLPivot$Block4ShapePnL[Block4ShapePnLPivot$Portfolio ==x & Block4ShapePnLPivot$ReportDate > DoDStart & Block4ShapePnLPivot$ReportDate <= DoDEnd & Block4ShapePnLPivot$FiscalYear ==y]
	,Q5$TradePnL[Q5$Portfolio ==x &Q5$ReportDate >DoDStart & Q5$ReportDate <=DoDEnd & !(Q5$BookOID %in% c(293,365,133)) & Q5$Include =="Y" & Q5$Fiscal ==y]
	,TransferPnLPivot$TransferPnL[TransferPnLPivot$Portfolio ==x &TransferPnLPivot$ReportDate >DoDStart & TransferPnLPivot$ReportDate <= DoDEnd & TransferPnLPivot$FiscalYear ==y],na.rm=TRUE),
	x=FiscalPower$ISO, y=FiscalPower$FiscalYear)

### This is YTD to PromptMonth (could convert mapply to sapply() and drop the "2024"?)
FiscalPower$PrimaryTrading[FiscalPower$ISO =="ERCOT" & FiscalPower$FiscalYear ==1] <- mapply(function(x,y) -1*sum(Q9$HubtoLZBasisStrategyPnL[Q9$ReportDate > DoDStart & Q9$ReportDate <=DoDEnd & Q9$Portfolio ==x & Q9$FiscalYear ==y & Q9$Include =="Y" & Q9$CalendarMonth >=DoDStart & Q9$CalendarMonth <=DoDEnd])
	,x = FiscalPower$ISO[FiscalPower$ISO =="ERCOT" & FiscalPower$FiscalYear ==1],y = 2025)

FiscalPower$PrimaryTrading[FiscalPower$ISO =="IESO" & FiscalPower$FiscalYear ==1] <- mapply(function(x,y) 
	sum(C11$Cost[C11$LedgerDate > DoDStart & C11$LedgerDate <= DoDEnd & C11$SystemOperatorIdentifier == x & C11$FiscalYear == y & C11$CalendarMonth >=DoDStart & C11$CalendarMonth <=DoDEnd],na.rm=TRUE)+sum(
	C7[C7$ReportDate >DoDStart & C7$ReportDate <=DoDEnd & C7$FiscalYear ==y & C7$CalendarMonth >=DoDStart & C7$CalendarMonth <=DoDEnd,c("PWR_CurvePnL","FX_Adjustment")]
	,PowerGasTradePnLPivot$PowerGasTradePnL[PowerGasTradePnLPivot$ReportDate >DoDStart & PowerGasTradePnLPivot$ReportDate <=DoDEnd & PowerGasTradePnLPivot$FiscalYear ==y & PowerGasTradePnLPivot$CalendarMonth >=DoDStart & PowerGasTradePnLPivot$CalendarMonth <=DoDEnd & PowerGasTradePnLPivot$ISO ==x & PowerGasTradePnLPivot$FiscalYear==y]
	,Q3[Q3$ReportDate > DoDStart & Q3$ReportDate <= DoDEnd & Q3$FiscalYear ==y & Q3$Include =="Y" & Q3$StrategyID ==178 & Q3$CalendarMonth >=DoDStart & Q3$CalendarMonth <=DoDEnd, c("FXAdjustmentCheck","NGCurvePnL_TeamCurrency")],na.rm=TRUE)
	,x = FiscalPower$ISO[FiscalPower$ISO =="IESO" & FiscalPower$FiscalYear ==1],y=2025)

FiscalPower$PrimaryTrading[FiscalPower$ISO %in% c("ERCOT","IESO")==FALSE & FiscalPower$FiscalYear ==1] <- mapply(function(x,y) sum(C11$Cost[C11$SystemOperatorIdentifier == x & C11$LedgerDate > DoDStart & C11$LedgerDate <= DoDEnd & C11$FiscalYear ==y & C11$CalendarMonth >=DoDStart & C11$CalendarMonth <=DoDEnd],na.rm=TRUE)
	,x = FiscalPower$ISO[FiscalPower$ISO %in% c("ERCOT","IESO")==FALSE  & FiscalPower$FiscalYear ==1],y=2025)

FiscalPower$PrimaryTrading[FiscalPower$FiscalYear ==1]<- FiscalPower$PrimaryTrading[FiscalPower$FiscalYear ==1] + mapply(function(x,y) 
	sum(CurvePnLPivot$CurvePnL[CurvePnLPivot$Portfolio ==x & CurvePnLPivot$ReportDate > DoDStart & CurvePnLPivot$ReportDate <= DoDEnd & CurvePnLPivot$FiscalYear ==y & CurvePnLPivot$CalendarMonth >=DoDStart & CurvePnLPivot$CalendarMonth <=DoDEnd]
	,Block4ShapePnLPivot$Block4ShapePnL[Block4ShapePnLPivot$Portfolio ==x & Block4ShapePnLPivot$ReportDate > DoDStart & Block4ShapePnLPivot$ReportDate <= DoDEnd & Block4ShapePnLPivot$FiscalYear ==y & Block4ShapePnLPivot$CalendarMonth >=DoDStart & Block4ShapePnLPivot$CalendarMonth <=DoDEnd]
	,Q5$TradePnL[Q5$Portfolio ==x &Q5$ReportDate >DoDStart & Q5$ReportDate <=DoDEnd & !(Q5$BookOID %in% c(293,365,133)) & Q5$Include =="Y" & Q5$Fiscal ==y & Q5$CalendarMonth >=DoDStart & Q5$CalendarMonth <=DoDEnd]
	,TransferPnLPivot$TransferPnL[TransferPnLPivot$Portfolio ==x &TransferPnLPivot$ReportDate >DoDStart & TransferPnLPivot$ReportDate <= DoDEnd & TransferPnLPivot$FiscalYear ==y & TransferPnLPivot$CalendarMonth >=DoDStart & TransferPnLPivot$CalendarMonth <=DoDEnd],na.rm=TRUE),
	x=FiscalPower$ISO[FiscalPower$FiscalYear ==1], y=2025)

## Weather books power, ytdstart - prompt
FiscalPower$Weather[FiscalPower$FiscalYear ==1 & FiscalPower$ISO !="PJM"]<-sapply(FiscalPower$ISO[FiscalPower$FiscalYear ==1 & FiscalPower$ISO !="PJM"],function(x) sum(WeatherPnLPivot$WeatherPnL[WeatherPnLPivot$Portfolio ==x & WeatherPnLPivot$ReportDate > DoDStart & WeatherPnLPivot$ReportDate <= DoDEnd & WeatherPnLPivot$CalendarMonth >= DoDStart & WeatherPnLPivot$CalendarMonth <= DoDEnd]
	,Q5$TradePnL[Q5$Portfolio ==x & Q5$ReportDate > DoDStart & Q5$ReportDate <=DoDEnd & Q5$CalendarMonth >=DoDStart & Q5$CalendarMonth <=DoDEnd & Q5$Include =="Y" & Q5$BookOID ==293]))
FiscalPower$Weather[FiscalPower$FiscalYear ==1 & FiscalPower$ISO =="PJM"]<-sapply(FiscalPower$ISO[FiscalPower$FiscalYear ==1 & FiscalPower$ISO =="PJM"],function(x) sum(WeatherPnLPivot$WeatherPnL[WeatherPnLPivot$Portfolio ==x & WeatherPnLPivot$ReportDate > DoDStart & WeatherPnLPivot$ReportDate <= DoDEnd & WeatherPnLPivot$CalendarMonth >= DoDStart & WeatherPnLPivot$CalendarMonth <= DoDEnd]
	,Q5$TradePnL[Q5$Portfolio ==x & Q5$ReportDate > DoDStart & Q5$ReportDate <=DoDEnd & Q5$CalendarMonth >=DoDStart & Q5$CalendarMonth <=DoDEnd & Q5$Include =="Y" & Q5$BookOID ==293]
	,Q2$TradePnL_TeamCurrency[Q2$ReportDate >DoDStart & Q2$ReportDate <=DoDEnd & Q2$CalendarMonth >=DoDStart & Q2$CalendarMonth <=DoDEnd & Q2$Include =="Y" & Q2$ISO =="PJM"]
	,Q3$NGCurvePnL_TeamCurrency[Q3$ReportDate >DoDStart & Q3$ReportDate <=DoDEnd & Q3$CalendarMonth >=DoDStart & Q3$CalendarMonth <=DoDEnd & Q3$Include =="Y" & Q3$ISO =="PJM"]))
##Weather books, fiscal years (not by calmonth)
FiscalPower$Weather[FiscalPower$FiscalYear !=1  & FiscalPower$ISO !="PJM"]<-mapply(function(x,y) sum(WeatherPnLPivot$WeatherPnL[WeatherPnLPivot$FiscalYear ==y & WeatherPnLPivot$Portfolio ==x & WeatherPnLPivot$ReportDate > DoDStart & WeatherPnLPivot$ReportDate <= DoDEnd]
	,Q5$TradePnL[Q5$Portfolio ==x & Q5$Fiscal ==y & Q5$ReportDate > DoDStart & Q5$ReportDate <=DoDEnd & Q5$Include =="Y" & Q5$BookOID ==293])
	,x=FiscalPower$ISO[FiscalPower$FiscalYear !=1 & FiscalPower$ISO !="PJM"],y=FiscalPower$FiscalYear[FiscalPower$FiscalYear !=1 & FiscalPower$ISO !="PJM"])
FiscalPower$Weather[FiscalPower$FiscalYear !=1 & FiscalPower$ISO =="PJM"]<-mapply(function(x,y) sum(WeatherPnLPivot$WeatherPnL[WeatherPnLPivot$Portfolio ==x & WeatherPnLPivot$FiscalYear == y & WeatherPnLPivot$ReportDate > DoDStart & WeatherPnLPivot$ReportDate <= DoDEnd]
	,Q5$TradePnL[Q5$Portfolio ==x & Q5$Fiscal ==y & Q5$ReportDate > DoDStart & Q5$ReportDate <=DoDEnd  & Q5$Include =="Y" & Q5$BookOID ==293]
	,Q2$TradePnL_TeamCurrency[Q2$ReportDate >DoDStart & Q2$FiscalYear == y & Q2$ReportDate <=DoDEnd & Q2$Include =="Y" & Q2$ISO =="PJM"]
	,Q3$NGCurvePnL_TeamCurrency[Q3$FiscalYear ==y & Q3$ReportDate >DoDStart & Q3$ReportDate <=DoDEnd & Q3$Include =="Y" & Q3$ISO =="PJM"])
	,x=FiscalPower$ISO[FiscalPower$FiscalYear !=1 & FiscalPower$ISO =="PJM"],y =FiscalPower$FiscalYear[FiscalPower$FiscalYear !=1 & FiscalPower$ISO =="PJM"])

## Primary Gas by Fiscal

FiscalGas<-expand.grid("Strategy" = c("XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX"),"FiscalYear" = c(1,2025:2036))
## Primary Gas YTDStart - prompt month
FiscalGas$PrimaryTrading[FiscalGas$Strategy %in% c("XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX") & FiscalGas$FiscalYear ==1] <- sapply(FiscalGas$Strategy[FiscalGas$Strategy %in% c("XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX") & FiscalGas$FiscalYear ==1],function(x) sum(
	Q3[Q3$Strategy2 ==x & Q3$ReportDate > DoDStart & Q3$ReportDate <= DoDEnd & Q3$Include =="Y" & Q3$CalendarMonth >=DoDStart & Q3$CalendarMonth <=DoDEnd, c("FXAdjustmentCheck","NGCurvePnL_TeamCurrency")]
	,Q2$TradePnL_TeamCurrency[Q2$Strategy2 ==x & Q2$ReportDate >DoDStart & Q2$ReportDate <= DoDEnd & Q2$CalendarMonth >=DoDStart & Q2$CalendarMonth <=DoDEnd & Q2$Include =="Y"],Q4$TransferPnL[Q4$Strategy2 ==x & Q4$ReportDate > DoDStart & Q4$ReportDate <=DoDEnd & Q4$CalendarMonth <=DoDEnd & Q4$CalendarMonth >= DoDStart & Q4$Include =="Y"],na.rm=TRUE))
FiscalGas$PrimaryTrading[(FiscalGas$Strategy %in%  c("XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX","XXX"))==FALSE & FiscalGas$FiscalYear ==1] <- sapply(FiscalGas$Strategy[(FiscalGas$Strategy %in% c("Canada Wholesale","UnitedStates Wholesale"))==FALSE & FiscalGas$FiscalYear ==1],function(x) sum(
	Q3[Q3$Strategy2 ==x & Q3$ReportDate > DoDStart & Q3$ReportDate <= DoDEnd & Q3$Include =="Y" & Q3$CalendarMonth >=DoDStart & Q3$CalendarMonth <=DoDEnd, c("FXAdjustmentCheck","NGCurvePnL_TeamCurrency")]
	,Q2$TradePnL_TeamCurrency[Q2$Strategy2 ==x & Q2$ReportDate >DoDStart & Q2$ReportDate <= DoDEnd & Q2$CalendarMonth >=DoDStart & Q2$CalendarMonth <=DoDEnd & Q2$Include =="Y"],na.rm=TRUE))
## Primary Gas fiscal (not by month)
FiscalGas$PrimaryTrading[FiscalGas$Strategy %in% c("Canada Wholesale","UnitedStates Wholesale") & FiscalGas$FiscalYear !=1] <- mapply(function(x,y) sum(
	Q3[Q3$Strategy2 ==x & Q3$FiscalYear ==y & Q3$ReportDate > DoDStart & Q3$ReportDate <= DoDEnd & Q3$Include =="Y", c("FXAdjustmentCheck","NGCurvePnL_TeamCurrency")]
	,Q2$TradePnL_TeamCurrency[Q2$Strategy2 ==x & Q2$FiscalYear ==y & Q2$ReportDate >DoDStart & Q2$ReportDate <= DoDEnd & Q2$Include =="Y"]
	,Q4$TransferPnL[Q4$Strategy2 ==x & Q4$Fiscal == y & Q4$ReportDate > DoDStart & Q4$ReportDate <=DoDEnd & Q4$Include =="Y"],na.rm=TRUE)
	,x = FiscalGas$Strategy[FiscalGas$Strategy %in% c("Canada Wholesale","UnitedStates Wholesale") & FiscalGas$FiscalYear !=1],y = FiscalGas$FiscalYear[FiscalGas$Strategy %in% c("Canada Wholesale","UnitedStates Wholesale") & FiscalGas$FiscalYear !=1])
FiscalGas$PrimaryTrading[(FiscalGas$Strategy %in% c("Canada Wholesale","UnitedStates Wholesale"))==FALSE & FiscalGas$FiscalYear !=1] <- mapply(function(x,y) sum(
	Q3[Q3$Strategy2 ==x & Q3$FiscalYear ==y & Q3$ReportDate > DoDStart & Q3$ReportDate <= DoDEnd & Q3$Include =="Y", c("FXAdjustmentCheck","NGCurvePnL_TeamCurrency")]
	,Q2$TradePnL_TeamCurrency[Q2$Strategy2 ==x & Q2$FiscalYear ==y & Q2$ReportDate >DoDStart & Q2$ReportDate <= DoDEnd & Q2$Include =="Y"],na.rm = TRUE)
	,x = FiscalGas$Strategy[(FiscalGas$Strategy %in% c("Canada Wholesale","UnitedStates Wholesale"))==FALSE & FiscalGas$FiscalYear !=1], y =FiscalGas$FiscalYear[(FiscalGas$Strategy %in% c("Canada Wholesale","UnitedStates Wholesale"))==FALSE & FiscalGas$FiscalYear !=1])

FiscalPower$TableIdentifier <- DateCounter1
FiscalGas$TableIdentifier <- DateCounter1
FiscalSecondaries$TableIdentifier <- DateCounter1
FinalFiscalPower<-rbind(FinalFiscalPower,FiscalPower)
FinalFiscalGas<-rbind(FinalFiscalGas,FiscalGas)
FinalFiscalSecondaries<-rbind(FinalFiscalSecondaries,FiscalSecondaries)
DoDGas$TableIdentifier <- DateCounter1
DoDPower$TableIdentifier <- DateCounter1
FinalDoDPower<-rbind(FinalDoDPower,DoDPower)
FinalDoDGas<- rbind(FinalDoDGas,DoDGas)
DoDPowerFiscal$TableIdentifier<-DateCounter1
FinalDoDPowerFiscal<-rbind(FinalDoDPowerFiscal,DoDPowerFiscal)
DoDPowerMonthly$TableIdentifier<-DateCounter1
FinalDoDPowerMonthly<-rbind(FinalDoDPowerMonthly,DoDPowerMonthly)
}

## Subtract YTDStart - Prompt month from current fiscal year amount. Then some table naming convention stuff
FinalFiscalPower<-FinalFiscalPower[order(FinalFiscalPower$ISO,FinalFiscalPower$FiscalYear,FinalFiscalPower$TableIdentifier),]
FinalFiscalGas<-FinalFiscalGas[order(FinalFiscalGas$Strategy,FinalFiscalGas$FiscalYear,FinalFiscalGas$TableIdentifier),]
FinalFiscalSecondaries<-FinalFiscalSecondaries[order(FinalFiscalSecondaries$Secondary,FinalFiscalSecondaries$FiscalYear,FinalFiscalSecondaries$TableIdentifier),]
FinalFiscalPower[FinalFiscalPower$FiscalYear ==2025,c("PrimaryTrading","Weather")] <-FinalFiscalPower[FinalFiscalPower$FiscalYear ==2025,c("PrimaryTrading","Weather")] - FinalFiscalPower[FinalFiscalPower$FiscalYear ==1,c("PrimaryTrading","Weather")]
FinalFiscalGas$PrimaryTrading[FinalFiscalGas$FiscalYear ==2025] <-FinalFiscalGas$PrimaryTrading[FinalFiscalGas$FiscalYear ==2025] - FinalFiscalGas$PrimaryTrading[FinalFiscalGas$FiscalYear ==1]
FinalFiscalSecondaries$PrimaryTrading[FinalFiscalSecondaries$FiscalYear ==2025] <-FinalFiscalSecondaries$PrimaryTrading[FinalFiscalSecondaries$FiscalYear ==2025] - FinalFiscalSecondaries$PrimaryTrading[FinalFiscalSecondaries$FiscalYear ==1]
FinalFiscalPower$FiscalYear[FinalFiscalPower$FiscalYear ==2025] <- "PromptMonth To FiscalYearEnd"
FinalFiscalGas$FiscalYear[FinalFiscalGas$FiscalYear ==2025] <-"PromptMonth To FiscalYearEnd"
FinalFiscalSecondaries$FiscalYear[FinalFiscalSecondaries$FiscalYear ==2025] <-"PromptMonth To FiscalYearEnd"
FinalFiscalPower$FiscalYear[FinalFiscalPower$FiscalYear ==1] <-"YTDStart to PromptMonth"
FinalFiscalGas$FiscalYear[FinalFiscalGas$FiscalYear ==1] <-"YTDStart to PromptMonth"
FinalFiscalSecondaries$FiscalYear[FinalFiscalSecondaries$FiscalYear ==1] <-"YTDStart to PromptMonth"
FinalFiscalPower$ReportDate<-DoDEnd
FinalFiscalGas$ReportDate<-DoDEnd
FinalFiscalSecondaries$InsertTime<-InsertTime
FinalDoDPower$ReportDate<-DoDEnd
FinalDoDGas$ReportDate<-DoDEnd
FinalFiscalPower$InsertTime<-InsertTime
FinalFiscalGas$InsertTime<-InsertTime
FinalFiscalSecondaries$InsertTime<-InsertTime
FinalDoDPower$InsertTime<-InsertTime
FinalDoDGas$InsertTime<-InsertTime

## TradePnL Table
TradePnLTable <- data.frame("Market"  =rep(c("ERCOT","PJM","NYISO","ISO-NE","MISO","IESO","AESO","US Gas","Canada Gas","Strategic NYMEX","Capacity"),length(c(YTDStart,UnexplainedDoDStart)))
,"TableIdentifier"  =rep(c((YTDStart-1),UnexplainedDoDStart),each=length(c("ERCOT","PJM","NYISO","ISO-NE","MISO","IESO","AESO","US Gas","Canada Gas","Strategic NYMEX","Capacity"))))

## Power YTD + DoD trade pnl section
TradePnLTable$Volumes[TradePnLTable$Market %in% c("ERCOT","PJM","NYISO","NE-ISO","MISO","AESO","IESO")] <-mapply(function(x,y) sum(abs(Q5$Volume[Q5$Portfolio ==x & Q5$ReportDate > y & Q5$ReportDate <=DoDEnd]),na.rm=TRUE),x = TradePnLTable$Market[TradePnLTable$Market %in% c("ERCOT","PJM","NYISO","NE-ISO","MISO","AESO","IESO")], y = TradePnLTable$TableIdentifier[TradePnLTable$Market %in% c("ERCOT","PJM","NYISO","NE-ISO","MISO","AESO","IESO")])
TradePnLTable$TradePnL[TradePnLTable$Market %in% c("ERCOT","PJM","NYISO","NE-ISO","MISO","AESO","IESO")] <-mapply(function(x,y) sum(Q5$TradePnL[Q5$Portfolio ==x & Q5$ReportDate > y & Q5$ReportDate <=DoDEnd],na.rm=TRUE),x = TradePnLTable$Market[TradePnLTable$Market %in% c("ERCOT","PJM","NYISO","NE-ISO","MISO","AESO","IESO")], y = TradePnLTable$TableIdentifier[TradePnLTable$Market %in% c("ERCOT","PJM","NYISO","NE-ISO","MISO","AESO","IESO")])
## AESO for some reason exclusively has an "Include" tag for DoD on the power markets
TradePnLTable$Volumes[TradePnLTable$Market =="AESO" & TradePnLTable$TableIdentifier ==UnexplainedDoDStart] <-sum(abs(Q5$Volume[Q5$Portfolio =="AESO" & Q5$ReportDate > UnexplainedDoDStart & Q5$ReportDate <=DoDEnd & Q5$Include =="Y"]),na.rm=TRUE)
TradePnLTable$TradePnL[TradePnLTable$Market =="AESO" & TradePnLTable$TableIdentifier ==UnexplainedDoDStart] <-sum(Q5$TradePnL[Q5$Portfolio =="AESO" & Q5$ReportDate > UnexplainedDoDStart & Q5$ReportDate <=DoDEnd & Q5$Include =="Y"],na.rm=TRUE)
## PJM Needs to subtract out gas trade pnl in books 192 from DoD amounts 
TradePnLTable$Volumes[TradePnLTable$Market =="PJM" & TradePnLTable$TableIdentifier ==UnexplainedDoDStart] <-sum(abs(Q5$Volume[Q5$ReportDate >UnexplainedDoDStart & Q5$ReportDate <= DoDEnd & Q5$Portfolio =="PJM"]),abs(Q2$Volume[Q2$DeliveryorReceiptPoint == "DeliveryPoint" & Q2$StrategyID ==192 & Q2$Include =="Y" & Q2$TradingTeam =="UnitedStates" & Q2$ReportDate > UnexplainedDoDStart & Q2$ReportDate <=DoDEnd]),na.rm=TRUE)
TradePnLTable$TradePnL[TradePnLTable$Market =="PJM" & TradePnLTable$TableIdentifier ==UnexplainedDoDStart] <-sum(Q5$TradePnL[Q5$ReportDate >UnexplainedDoDStart & Q5$ReportDate <= DoDEnd & Q5$Portfolio =="PJM"],Q2$TradePnL_TeamCurrency[Q2$DeliveryorReceiptPoint == "DeliveryPoint" & Q2$StrategyID ==192 & Q2$Include =="Y" & Q2$TradingTeam =="UnitedStates" & Q2$ReportDate > UnexplainedDoDStart & Q2$ReportDate <=DoDEnd],na.rm=TRUE)
## YTD and DoD sections for gas markets' trade pnls. Very nuanced between YTD and DoD
## has Strategy 192 included in YTD but NOT in DoD amounts.
TradePnLTable$Volumes[TradePnLTable$Market == "US Gas" & TradePnLTable$TableIdentifier== (YTDStart-1)]<-sapply(TradePnLTable$TableIdentifier[TradePnLTable$Market == "US Gas" & TradePnLTable$TableIdentifier== (YTDStart-1)],function(x) sum(abs(Q2$Volume[Q2$DeliveryorReceiptPoint == "DeliveryPoint" & Q2$ReportDate >x & Q2$TradingTeam =="UnitedStates" & Q2$ReportDate <=DoDEnd])
	,140000,na.rm=TRUE))
TradePnLTable$TradePnL[TradePnLTable$Market == "US Gas" & TradePnLTable$TableIdentifier== (YTDStart-1)]<-sapply(TradePnLTable$TableIdentifier[TradePnLTable$Market == "US Gas" & TradePnLTable$TableIdentifier== (YTDStart-1)],function(x) sum(Q2$TradePnL[Q2$DeliveryorReceiptPoint == "DeliveryPoint" & Q2$ReportDate >x & Q2$TradingTeam =="UnitedStates" & Q2$ReportDate <=DoDEnd]
	,na.rm=TRUE))
TradePnLTable$Volumes[TradePnLTable$Market == "Canada Gas" & TradePnLTable$TableIdentifier== (YTDStart-1)]<-sapply(TradePnLTable$TableIdentifier[TradePnLTable$Market == "Canada Gas" & TradePnLTable$TableIdentifier== (YTDStart-1)],function(x) sum(abs(Q2$Volume[Q2$DeliveryorReceiptPoint == "DeliveryPoint" & Q2$ReportDate >x & Q2$TradingTeam =="Canada" &Q2$Strategy != "JE Trading NYMEX Corporate" & Q2$ReportDate <=DoDEnd]),na.rm=TRUE))
TradePnLTable$TradePnL[TradePnLTable$Market == "Canada Gas" & TradePnLTable$TableIdentifier== (YTDStart-1)]<-sapply(TradePnLTable$TableIdentifier[TradePnLTable$Market == "Canada Gas" & TradePnLTable$TableIdentifier== (YTDStart-1)],function(x) sum(Q2$TradePnL_TeamCurrency[Q2$DeliveryorReceiptPoint == "DeliveryPoint" & Q2$ReportDate >x & Q2$TradingTeam =="Canada" &Q2$Strategy != "JE Trading NYMEX Corporate" & Q2$ReportDate <=DoDEnd],na.rm=TRUE))
TradePnLTable$Volumes[TradePnLTable$Market == "Strategic NYMEX" & TradePnLTable$TableIdentifier== (YTDStart-1)]<-sapply(TradePnLTable$TableIdentifier[TradePnLTable$Market =="Strategic NYMEX" & TradePnLTable$TableIdentifier== (YTDStart-1)],function(x) sum(abs(Q2$Volume[Q2$DeliveryorReceiptPoint == "DeliveryPoint" & Q2$ReportDate >x & Q2$TradingTeam =="Canada" &Q2$Strategy == "JE Trading NYMEX Corporate" & Q2$ReportDate <=DoDEnd]),na.rm=TRUE))
TradePnLTable$TradePnL[TradePnLTable$Market == "Strategic NYMEX" & TradePnLTable$TableIdentifier== (YTDStart-1)]<-sapply(TradePnLTable$TableIdentifier[TradePnLTable$Market =="Strategic NYMEX" & TradePnLTable$TableIdentifier== (YTDStart-1)],function(x) sum(Q2$TradePnL[Q2$DeliveryorReceiptPoint == "DeliveryPoint" & Q2$ReportDate >x & Q2$TradingTeam =="Canada" &Q2$Strategy == "JE Trading NYMEX Corporate" & Q2$ReportDate <=DoDEnd],na.rm=TRUE))
TradePnLTable$Volumes[TradePnLTable$Market == "Capacity"]<-sapply(TradePnLTable$TableIdentifier[TradePnLTable$Market =="Capacity"],function(x) sum(abs(C10$Volume[C10$ISO == "NYISO" & C10$Include =="Y" & C10$ReportDate >x & C10$ReportDate <=DoDEnd]),na.rm=TRUE))
TradePnLTable$TradePnL[TradePnLTable$Market == "Capacity"]<-sapply(TradePnLTable$TableIdentifier[TradePnLTable$Market =="Capacity"],function(x) sum(C10$TradePnL[C10$ISO == "NYISO" & C10$Include =="Y" & C10$ReportDate >x & C10$ReportDate <=DoDEnd],na.rm=TRUE))
## DoD Section for Gas TradePnLTable
TradePnLTable$Volumes[TradePnLTable$Market == "US Gas" & TradePnLTable$TableIdentifier ==UnexplainedDoDStart]<-sapply(TradePnLTable$TableIdentifier[TradePnLTable$Market == "US Gas" & TradePnLTable$TableIdentifier ==UnexplainedDoDStart],function(x) sum(abs(Q2$Volume[Q2$DeliveryorReceiptPoint == "DeliveryPoint" & Q2$ReportDate >x & Q2$TradingTeam =="UnitedStates" & Q2$ReportDate <=DoDEnd & Q2$Include =="Y" & Q2$StrategyID!=192]),na.rm=TRUE))
TradePnLTable$TradePnL[TradePnLTable$Market == "US Gas" & TradePnLTable$TableIdentifier ==UnexplainedDoDStart]<-sapply(TradePnLTable$TableIdentifier[TradePnLTable$Market == "US Gas" & TradePnLTable$TableIdentifier ==UnexplainedDoDStart],function(x) sum(Q2$TradePnL[Q2$DeliveryorReceiptPoint == "DeliveryPoint" & Q2$ReportDate >x & Q2$TradingTeam =="UnitedStates" & Q2$ReportDate <=DoDEnd & Q2$Include =="Y" & Q2$StrategyID!=192],na.rm=TRUE))
TradePnLTable$Volumes[TradePnLTable$Market == "Canada Gas" & TradePnLTable$TableIdentifier ==UnexplainedDoDStart]<-sapply(TradePnLTable$TableIdentifier[TradePnLTable$Market == "Canada Gas" & TradePnLTable$TableIdentifier ==UnexplainedDoDStart],function(x) sum(abs(Q2$Volume[Q2$DeliveryorReceiptPoint == "DeliveryPoint" & Q2$ReportDate >x & Q2$TradingTeam =="Canada" & Q2$ReportDate <=DoDEnd & Q2$Include =="Y"]),na.rm=TRUE))
TradePnLTable$TradePnL[TradePnLTable$Market == "Canada Gas" & TradePnLTable$TableIdentifier ==UnexplainedDoDStart]<-sapply(TradePnLTable$TableIdentifier[TradePnLTable$Market == "Canada Gas" & TradePnLTable$TableIdentifier ==UnexplainedDoDStart],function(x) sum(Q2$TradePnL_TeamCurrency[Q2$DeliveryorReceiptPoint == "DeliveryPoint" & Q2$ReportDate >x & Q2$TradingTeam =="Canada" & Q2$ReportDate <=DoDEnd & Q2$Include =="Y"],na.rm=TRUE))
TradePnLTable$Volumes[TradePnLTable$Market == "Strategic NYMEX" & TradePnLTable$TableIdentifier ==UnexplainedDoDStart]<-0
TradePnLTable$TradePnL[TradePnLTable$Market == "Strategic NYMEX" & TradePnLTable$TableIdentifier ==UnexplainedDoDStart]<-0
## Cleaning up table for future referencing/export to SQL
TradePnLTable$TableIdentifier <- ifelse(TradePnLTable$TableIdentifier == UnexplainedDoDStart,"DoD","YTD")
TradePnLTable$UnitCost =TradePnLTable$TradePnL/TradePnLTable$Volumes
TradePnLTable[is.na(TradePnLTable)]<-0
TradePnLTable$ReportDate <-DoDEnd
TradePnLTable$InsertTime <-InsertTime

## Hard Code modification section: Similar to unexplained, but things that are added to the summary tab that I don't know why

FinalDoDGas$TradePnL[FinalDoDGas$Strategy =="UnitedStates Wholesale" & FinalDoDGas$TableIdentifier =="YTD"] = FinalDoDGas$TradePnL[FinalDoDGas$Strategy =="UnitedStates Wholesale" & FinalDoDGas$TableIdentifier =="YTD"]
FinalFiscalGas$PrimaryTrading[FinalFiscalGas$Strategy =="UnitedStates Wholesale" & FinalFiscalGas$TableIdentifier =="YTD" & FinalFiscalGas$FiscalYear =="YTDStart to PromptMonth"] <- FinalFiscalGas$PrimaryTrading[FinalFiscalGas$Strategy =="UnitedStates Wholesale" & FinalFiscalGas$TableIdentifier =="YTD" & FinalFiscalGas$FiscalYear =="YTDStart to PromptMonth"]

##Quality Control Section
TableExportSection = 1

if(is.na(sum(FinalFiscalPower[,c(3,4)],FinalFiscalGas$PrimaryTrading,FinalFiscalSecondaries$PrimaryTrading,FinalDoDPower[,3:11],FinalDoDGas[,3:8])) ==TRUE){
	print("Tables have an NA somewhere")
	TableExportSection =0
}

if(sum(abs(Unexplained$DoDUnexplained[Unexplained$ReportDate >UnexplainedDoDStart & Unexplained$ReportDate <= DoDEnd])>500) !=0){
	print("Unexplained Check required")
	TableExportSection =0
}

## Table export using RODBC using the Load forecasting function
DBSQL04Channel<- odbcDriverConnect(connection= "DRIVER = {SQL Server};
					 			SERVER = {DBSQL04\\SQL04};
								Database= {Supply_Analytics}")

if(TableExportSection ==1){ 
	fcn_SQLInsertFast(data0 = FinalDoDGas,saveTable = "[Supply_Analytics].[OESCCA\\CCopeland].[TermPnLDoDGas1]",channelInsert = DBSQL04Channel,numParts = 500)
	fcn_SQLInsertFast(data0 = FinalDoDPower,saveTable = "[Supply_Analytics].[OESCCA\\CCopeland].[TermPnLDoDPower1]",channelInsert = DBSQL04Channel,numParts = 500)
	fcn_SQLInsertFast(data0 = FinalFiscalPower,saveTable = "[Supply_Analytics].[OESCCA\\CCopeland].[TermPnLFiscalPower1]",channelInsert = DBSQL04Channel,numParts = 500)
	fcn_SQLInsertFast(data0 = FinalFiscalGas,saveTable = "[Supply_Analytics].[OESCCA\\CCopeland].[TermPnLFiscalGas1]",channelInsert = DBSQL04Channel,numParts = 500)
	fcn_SQLInsertFast(data0 = FinalFiscalSecondaries,saveTable = "[Supply_Analytics].[OESCCA\\CCopeland].[TermPnLFiscalSecondary1]",channelInsert = DBSQL04Channel,numParts = 500)
	fcn_SQLInsertFast(data0 = TradePnLTable,saveTable = "[Supply_Analytics].[OESCCA\\CCopeland].[TermPnLTradePnLView1]",channelInsert = DBSQL04Channel,numParts = 500)
}

## Display if export aborted or successful
if(TableExportSection ==0) {
	print("Tables didn't export. Check Unexplained")	
} 	else { print("Tables exported to SQL!!")
}

## CSV Export Section - upload all dataframes of the SQL queries to an Excel (or csv?) on the shared folder as a physical copy of the PnL tables at a specific time.
## Useful for drilling down manually to specific deals/markets or to have copies before a rerun is done to find what changed.
## Need to make sure to split dataframes in two if dim(dataframe) exceeds Excel's max number of rows
if (CSVExportSection==1 & TableExportSection == 1 & 1==0) {
	if (nrow(Q9) >1000000){
		CSVExportList<- list("TradingBooks2025Monthly"=FinalDoDPowerMonthly,"TradingBooksByFiscal" = FinalDoDPowerFiscal,"Unexplained" = Unexplained,"PowerCurvePnL1" = Q9[1:1000000,],"PowerCurvePnL2" = Q9[1000001:(nrow(Q9)),],"PowerTradePnL" = Q5,"PowerWeatherPnL" = Q8, "PowerTransferPnL" = Q6,"Block4ShapePnL" = Q7,"GasCurvePnL"=Q3,"GasTradePnL"=Q2,"GasTransferPnL" = Q4, "GasCurvePnL-ConEdTier2" = C6,"PhysicalStrategyBook311" = C7,"NY Capacity CurvePnL" = C8,"NY Capacity TransferPnL" = C9,"NY Capacity TradePnL" = C10, "MTMAdjustment" = C11,"IESO Book135 CurvePnL" = HR1,"IESO Book135 TradePnL" = HR2)
	}	else	{ CSVExportList<- list("TradingBooks2025Monthly"=FinalDoDPowerMonthly,"TradingBooksByFiscal" = FinalDoDPowerFiscal,"Unexplained" = Unexplained,"PowerCurvePnL" = Q9,"PowerTradePnL" = Q5,"PowerWeatherPnL" = Q8, "PowerTransferPnL" = Q6,"Block4ShapePnL" = Q7,"GasCurvePnL"=Q3,"GasTradePnL"=Q2,"GasTransferPnL" = Q4, "GasCurvePnL-ConEdTier2" = C6,"PhysicalStrategyBook311" = C7,"NY Capacity CurvePnL" = C8,"NY Capacity TransferPnL" = C9,"NY Capacity TradePnL" = C10, "MTMAdjustment" = C11,"IESO Book135 CurvePnL" = HR1,"IESO Book135 TradePnL" = HR2)
	}
	write.xlsx(CSVExportList,paste0("TermPnL_SQLTablesExport","EOD",DoDEnd,"_",today()," ",hour(now()),"_",minute(now()),"_",(if(am(now()) ==TRUE){"AM"} else {"PM"}),".xlsx"))
	print("CSV Exported.")
}
## Print script runtime and USD TO CAD RATE:
print(now()-InsertTime)
print(mean(Q3$USDToCAD[Q3$ReportDate == DoDEnd & Q3$CalendarMonth ==(ceiling_date(DoDEnd,"month"))],na.rm=TRUE))


## Unexplained Check
## filter(Unexplained,ReportDate > ymd(UnexplainedDoDStart),)
